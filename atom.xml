<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sincerity</title>
  
  <subtitle>Story in work and life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chenjianhui.site/"/>
  <updated>2019-04-19T08:49:37.529Z</updated>
  <id>https://chenjianhui.site/</id>
  
  <author>
    <name>Jianhui Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Docker搭建隔离开发环境</title>
    <link href="https://chenjianhui.site/2019-04-19-docker-env/"/>
    <id>https://chenjianhui.site/2019-04-19-docker-env/</id>
    <published>2019-04-19T05:34:30.000Z</published>
    <updated>2019-04-19T08:49:37.529Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2019-04-19-home-pic.png" alt><br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp; 最近接触到了Docker相关的知识，了解了它的相关特性，并基于它搭建了一些如mysql/redis/mq作为一个后端开发所必须的的环境，为什么使用Docker来搭建，听我娓娓道来。<br><img src="https://resources.chenjianhui.site/2019-04-19-wtf-gaoshou.JPG?imageView2/2/w/300/h/300/q/75|imageslim" alt><br>&emsp;&emsp; 梦回到刚学后端的时候，你需要搭建个mysql环境，然后你去搜了下<a href="https://www.baidu.com/s?wd=windows%20mysql%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA" target="_blank" rel="noopener">windows mysql 环境搭建</a>，得到了一种叫绿色版安装，一种叫傻瓜式（安装包）式安装，一顿操作之后我们的电脑终于多了一个mysql的服务，然后使用Navicat成功连接上了，开始沾沾自喜。<br>&emsp;&emsp;一个月后，由于某种原因（可能你删了mysql包的哪个文件）你需要把mysql重装一下，于是乎你又去搜了下<a href="https://www.baidu.com/s?wd=windows%20mysql%20卸载" target="_blank" rel="noopener">windows mysql 卸载</a>，你惊喜的得到了这么一个结果<br><img src="https://resources.chenjianhui.site/2019-04-19-search-uninstall-mysql.png" alt><br>&emsp;&emsp;WTF？彻底卸载可还行，于是你花了比安装更多的力气去卸载了一个mysql。<br><img src="https://resources.chenjianhui.site/2019-04-19-wtf-question.JPG?imageView2/2/w/300/h/300/q/75|imageslim" alt><br>&emsp;&emsp;工作一年之后，你回想起你的这波操作，不禁笑了起来，你看着现在的vmware+centOS虚拟机中挂着的mysql+redis环境不禁沾沾自喜，虚拟机中的开发环境与本机完全隔离，哪天我不要环境了直接把虚拟机卸了就行，真是一个很完美的配置呢~<br><img src="https://resources.chenjianhui.site/2019-04-19-wtf-kuaile.JPG" alt><br>&emsp;&emsp;但是，你似乎忘记了，你花费了多大的力气踩了多少的坑才折腾好你这套环境，想到这你不禁为自己留下心疼的眼泪。<br><img src="https://resources.chenjianhui.site/2019-04-19-wtf-liulei.JPG" alt><br>&emsp;&emsp;这套环境支撑你跑了很久，在此之间你还学会了很多linux的常规指令，成为了一个运维小能手，有一天你在逛社区的时候看到一篇文章叫做<a href="https://www.jianshu.com/p/c1b79afc6d63" target="_blank" rel="noopener">使用 Docker 快速搭建开发环境</a>，能有多<strong>“快”</strong>，我得去瞅瞅，跟着它敲了一遍代码，mysql，它，起来了。<br><img src="https://resources.chenjianhui.site/2019-04-19-wtf-wtf.GIF" alt><br>&emsp;&emsp;我告诉自己，我得去看看这东西，它是个什么妖魔鬼怪。<br><img src="https://resources.chenjianhui.site/2019-04-19-wtf-good.JPG?imageView2/2/w/300/h/300/q/75|imageslim" alt></p><h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><p>&emsp;&emsp;Docker于2013年发布， 属于 Linux 容器的一种封装，提供简单易用的容器使用接口，可以轻易的使用/制作一个镜像（带有环境的容器）。具体详细的介绍网上有太多了，这里就不赘述了。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Windows-Docker环境搭建"><a href="#Windows-Docker环境搭建" class="headerlink" title="Windows Docker环境搭建"></a>Windows Docker环境搭建</h2><p>&emsp;&emsp;环境搭建的文章也很多，我这里主要说一下可能会踩到的坑，docker针对windows的用户主要有两个安装包可以下载，我们可以在阿里云平台看到关于安装的Docker的一些建议，具体区别可以参考这篇博客<a href="https://blog.csdn.net/JENREY/article/details/84493812" target="_blank" rel="noopener">dockerToolbox和docker for windows的区别</a>，本文主要讲一下Docker for Windows的安装流程。</p><ul><li>Docker Toolbox：Docker工具集安装器</li><li>Docker for Windows：Windows平台的Docker安装</li></ul><p><img src="http://resources.chenjianhui.site/2019-04-19-aliyun-windwos-docker-install.png" alt></p><ol><li>进入<a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">https://www.docker.com/products/docker-desktop</a> 下载Docker for Windows安装包；</li></ol><p><img src="https://resources.chenjianhui.site/2019-04-19-download-docker.png" alt></p><ol start="2"><li>执行Docker for Windows安装程序，一路next，Docker运行成功后会有通知且右下角有logo图标存在；</li><li>没了，Docker这就算安装好了，使用PowerShell或者cmd执行命令试试<br><img src="https://resources.chenjianhui.site/2019-04-19-exec-docker-test.png" alt></li><li>Docker安装完成后，由于它需要Hyper-V的支持，这会与VMware的虚拟机启动产生冲突报错如下，具体原因请参考<a href="https://blog.csdn.net/qq_40374604/article/details/83095410" target="_blank" rel="noopener">Docker 和 vmware 共存工作</a><br><img src="https://resources.chenjianhui.site/2019-04-19-vmware-error.png" alt></li></ol><h2 id="熟悉一下基本流程"><a href="#熟悉一下基本流程" class="headerlink" title="熟悉一下基本流程"></a>熟悉一下基本流程</h2><p>&emsp;&emsp;在这个阶段我们使用Docker拉取一个集成了SSH服务的centOS7系统镜像，将它运行起来并使用Xshell远程连接做一些基本的linux操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull 拉取镜像指令</span></span><br><span class="line"><span class="comment"># jdeathe/centos-ssh代表镜像名称 centos-7代表镜像标签（版本）不填取最新latest</span></span><br><span class="line"><span class="comment"># 具体镜像信息查看 https://hub.docker.com/</span></span><br><span class="line">docker pull jdeathe/centos-ssh:centos-7</span><br><span class="line"><span class="comment"># docker images 查看已经拉取的镜像列表</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># docker run 将镜像构建成容器</span></span><br><span class="line"><span class="comment"># -d 分离运行 不会在命令行打印容器运行日志</span></span><br><span class="line"><span class="comment"># --name 指定容器名称</span></span><br><span class="line"><span class="comment"># -p 2020:22 将本机的2020端口映射到容器的22端口</span></span><br><span class="line"><span class="comment"># --env 设置容器支持的环境配置</span></span><br><span class="line"><span class="comment"># jdeathe/centos-ssh:centos-7 镜像名称</span></span><br><span class="line">docker run -d --name centos-ssh -p 2020:22 --env SSH_PASSWORD_AUTHENTICATION=<span class="literal">true</span> --env SSH_USER=admin --env SSH_USER_PASSWORD=123456 jdeathe/centos-ssh:centos-7</span><br><span class="line"><span class="comment"># docker inspect 查看指定容器的详细信息 centos-ssh是刚刚指定的容器名称</span></span><br><span class="line">docker inspect centos-ssh</span><br><span class="line"><span class="comment"># docker ps 查看容器信息 运行成功则会显示在列表中</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 使用XShell进入容器 locahost:2020 admin/123456</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;成功连接上容器并执行了一些基础操作</p><p><img src="https://resources.chenjianhui.site/2019-04-19-docker-centos-ssh-xshell.png" alt></p><p>&emsp;&emsp;除去不必要的打印信息指令，我们只需要使用两行代码即可创建一个centOS系统镜像容器</p><h2 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h2><p>&emsp;&emsp;指令操作虽然能让你更加熟练且装逼，但它总是繁琐的，Docker官方及周边提供了很多基于Docker指令的傻瓜式UI程序，在这里我主要介绍两款</p><h3 id="Kitematic-GUI程序"><a href="#Kitematic-GUI程序" class="headerlink" title="Kitematic GUI程序"></a>Kitematic GUI程序</h3><p>&emsp;&emsp;Kitematic是由Docker官方提供的一款桌面应用，提供了Windows平台下的绿色版压缩包，使用起来非常简单。</p><ol><li>前往Kitematic的<a href="https://github.com/docker/kitematic/releases" target="_blank" rel="noopener">github releases仓库</a>下载Kitematic-XXX-Windows.zip；</li><li>解压直接运行 Kitematic.exe，界面如下</li></ol><p><img src="https://resources.chenjianhui.site/2019-04-19-docker-gui.png" alt></p><p>点击一个容器可进入详情页面</p><p><img src="https://resources.chenjianhui.site/2019-04-19-docker-gui-containers.png" alt></p><p>点击Settings进入配置页面</p><p><img src="https://resources.chenjianhui.site/2019-04-19-docker-gui-container-setttings.png" alt></p><h3 id="Portainer-Web程序"><a href="#Portainer-Web程序" class="headerlink" title="Portainer Web程序"></a>Portainer Web程序</h3><p>&emsp;&emsp;Portainer是一个轻量级的管理界面，可以让您轻松地管理不同的Docker环境，功能比Kitematic强大许多。</p><p>&emsp;&emsp;Portainer是基于网页来操作的，本质上是一个B/S架构的程序，它有单独的镜像发布在Docker中，所以它的使用也非常便捷，我们只需要拉取镜像运行即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取最新的portainer镜像</span></span><br><span class="line">docker pull portainer/portainer</span><br><span class="line"><span class="comment"># --restart=always 代表容器总是随着Docker启动而启动</span></span><br><span class="line"><span class="comment"># -v 配置持久化路径</span></span><br><span class="line">docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name portainer portainer/portainer</span><br><span class="line"><span class="comment"># 检查服务运行状态</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 正常情况下服务已经运行在 http://localhost:9000</span></span><br></pre></td></tr></table></figure><ol><li>进入 <a href="http://localhost:9000/#/init/admin" target="_blank" rel="noopener">http://localhost:9000/#/init/admin</a> ， 进行管理员配置；</li></ol><p><img src="https://resources.chenjianhui.site/2019-04-19-portainer-init-admin.png" alt></p><ol start="2"><li>初始化Docker端点配置<a href="http://localhost:9000/#/init/endpoint" target="_blank" rel="noopener">http://localhost:9000/#/init/endpoint</a> ， 需要配合在Docker配置开启Web Api服务；</li></ol><p><img src="https://resources.chenjianhui.site/2019-04-19-portainer-init-endpoint.png" alt></p><p><img src="https://resources.chenjianhui.site/2019-04-19-docker-settings.png" alt></p><ol start="3"><li>进入Portainer主页，查看相关配置</li></ol><p><img src="https://resources.chenjianhui.site/2019-04-19-portainer-home.png" alt></p><p><img src="https://resources.chenjianhui.site/2019-04-19-portainer-dashboard.png" alt></p><h2 id="开发集成环境搭建"><a href="#开发集成环境搭建" class="headerlink" title="开发集成环境搭建"></a>开发集成环境搭建</h2><p>&emsp;&emsp;在有了前面环境的铺垫之后，现在可以很轻易就搭建好我们所需要的开发环境，具体操作无非是</p><ol><li>找到所需的镜像及版本，拉取镜像</li><li>根据镜像描述做好配置并启动</li><li>测试环境是否可用</li></ol><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>&emsp;&emsp;任意找一个GUI程序搜索到所需的镜像，拉取运行即可</p><p><img src="https://resources.chenjianhui.site/2019-04-19-gui-mysql.png" alt></p><p>&emsp;&emsp;关于mysql连接密码可在环境变量中配置重启</p><p><img src="https://resources.chenjianhui.site/2019-04-19-gui-mysql-settings.png" alt></p><p>&emsp;&emsp;使用Navicat测试连接是否可用，这里主要要看镜像与宿主机器的端口映射表，使用 localhost:3306 root/123456 即可连接上mysql，环境搭建成功</p><p><img src="https://resources.chenjianhui.site/2019-04-19-gui-mysql-settings-ports.png" alt></p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>&emsp;&emsp;使用Kitematic搜索redis相关镜像，点击创建，使用RedisDesktopManager进行测试，默认是没有密码验证的模式，如果需要更改可以进入容器内部修改，这部分操作我会在后续的博客整理</p><p><img src="https://resources.chenjianhui.site/2019-04-19-gui-redis.png" alt></p><h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><p>&emsp;&emsp;其他的环境操作都是类似的，当然如果没有搜索你想要的镜像（比如你想要一个mysql+redis的镜像），可以自己构建发布，在此之前你可能需要注册一个Docker账号</p><p><img src="https://resources.chenjianhui.site/2019-04-19-rabbitmq.png" alt></p><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="Docker镜像加速"><a href="#Docker镜像加速" class="headerlink" title="Docker镜像加速"></a>Docker镜像加速</h3><p>&emsp;&emsp;注册一个阿里云账号，进入控制台-&gt;容器镜像服务-&gt;镜像中心-&gt;镜像加速器，获取到加速器的地址，复制到Docker的Settings/Daemon中，重启Docker即可。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/stulzq/p/7743667.html" target="_blank" rel="noopener">Windows 10 安装Docker for Windows - 晓晨Master - 博客园</a><br><a href="https://www.jianshu.com/p/c1b79afc6d63" target="_blank" rel="noopener">使用 Docker 快速搭建开发环境</a><br><a href="https://blog.csdn.net/JENREY/article/details/84493812" target="_blank" rel="noopener">dockerToolbox和docker for windows的区别- Null的博客- CSDN博客</a><br><a href="https://blog.csdn.net/qq_40374604/article/details/83095410" target="_blank" rel="noopener">Docker 和 vmware 共存工作 - rodert - CSDN博客</a><br><a href="https://blog.csdn.net/qq273681448/article/details/75007828" target="_blank" rel="noopener">Docker各种可视化界面的比较</a></p>]]></content>
    
    <summary type="html">
    
      使用Docker搭建隔离开发环境
    
    </summary>
    
      <category term="Docker" scheme="https://chenjianhui.site/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://chenjianhui.site/tags/Docker/"/>
    
      <category term="mysql" scheme="https://chenjianhui.site/tags/mysql/"/>
    
      <category term="redis" scheme="https://chenjianhui.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>我的博客可以自己部署啦</title>
    <link href="https://chenjianhui.site/2019-03-07-blog-with-jenkins/"/>
    <id>https://chenjianhui.site/2019-03-07-blog-with-jenkins/</id>
    <published>2019-03-07T03:52:18.000Z</published>
    <updated>2019-03-21T03:38:56.326Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2019-03-07-home-pic.jpg" alt><br><a id="more"></a></p><p>我的自动化运维平台已经成功上线啦~</p><p>博客可以自己照顾自己啦~</p><p>本篇博客用于测试自动化运维平台是否正常运行</p><p>在我写完这篇博客执行以下脚本后</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">"自动部署测试"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>这时候对话开始了</p><blockquote><p>github：jenkins兄弟，快起来，该干活了</p><p>Jenkins看看来的任务，blogs，ok，i know</p><p>jenkins：包在我身上<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/calebman/blog.git</span><br><span class="line"><span class="comment"># 打印版本</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line"><span class="comment"># 安装hexo-cli脚手架</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm i</span><br><span class="line"><span class="comment"># 打包博客</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 将打包文件移动到服务器的指定目录 nginx配置目录</span></span><br><span class="line">cp -rf public/* /home/app/application/blogs/</span><br><span class="line"><span class="comment"># 部署到 github.io</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>jenkins：发封邮件给主人告诉他我干完了</p><p>盯</p><p>看看手机，好的看来博客已经上线了</p><p>访问<strong><a href="http://blog.chenjianhui.site" target="_blank" rel="noopener">http://blog.chenjianhui.site</a></strong>试试</p><p>有了，jenkins辛苦辣，下次给你换个更好的服务器环境</p></blockquote><p>测试成功<br>Ending~</p>]]></content>
    
    <summary type="html">
    
      博客你已经长大了，该学会自己部署了
    
    </summary>
    
      <category term="测试" scheme="https://chenjianhui.site/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jenkins" scheme="https://chenjianhui.site/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离模式下的DevOps</title>
    <link href="https://chenjianhui.site/2019-03-01-devops-practice/"/>
    <id>https://chenjianhui.site/2019-03-01-devops-practice/</id>
    <published>2019-03-01T03:03:25.000Z</published>
    <updated>2019-03-21T03:38:50.606Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2019-03-01-home-pic.jpg" alt><br><a id="more"></a></p><h1 id="背景概述"><a href="#背景概述" class="headerlink" title="背景概述"></a>背景概述</h1><h2 id="理解Devops"><a href="#理解Devops" class="headerlink" title="理解Devops"></a>理解Devops</h2><p>&emsp;&emsp; <a href="https://zh.wikipedia.org/wiki/DevOps" target="_blank" rel="noopener">维基百科</a>对Devops的定义是：一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。</p><p>&emsp;&emsp;自动化运维以及持续集成部署是Devops的核心思想，当你发现自己每天花费了大量的时间在等待程序<strong>打包/上传至服务器等</strong>过程中时，你就应该思考，是否需要将这些重复性的行为交给机器去做，来解放自己花费在这部分的时间。</p><h2 id="我为何要引入Devops"><a href="#我为何要引入Devops" class="headerlink" title="我为何要引入Devops"></a>我为何要引入Devops</h2><h3 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h3><p>&emsp;&emsp;楼主是一个常年在二三线城市小公司漂泊的苦逼程序员，小公司的特性就是一人当三人使，一个人兼做开发测试加运维，公司采用敏捷开发模式，现有平台<strong>4套</strong>，大部分都是前后端分离的系统，由于功能调整的比较快导致部署演示的频次非常高，最多会出现一天部署<strong>10次</strong>左右，再加上ssh文件上传与webpack的打包程序的运行时间较长，最快的<strong>本地打包</strong>+<strong>ssh上传</strong>+<strong>启动远程运行脚本</strong>的流程走下来也得5min左右，所以光部署这一块花费的人力成本已经不可忽略了。</p><h3 id="应用架构简介"><a href="#应用架构简介" class="headerlink" title="应用架构简介"></a>应用架构简介</h3><p>&emsp;&emsp;楼主公司的web应用主要采用SpringBoot+Vuejs前后端分离开发模式，打包后的应用由Nginx来动静内容分发，应用架构的详情可见我的另一篇博客<a href="/2019-02-23-server-front-separate/">前后端分离开发模式的实践总结</a>，源代码获取<a href="https://github.com/calebman/server-front-separate" target="_blank" rel="noopener">点击这里</a>，本文也将围绕着这个结构的工程来做自动化部署。</p><h3 id="冲突与问题"><a href="#冲突与问题" class="headerlink" title="冲突与问题"></a>冲突与问题</h3><ul><li>等待程序打包时间过长（特别是webpack的打包），大部分时间在等待，这件事在进行中也不好做别的事情</li><li>重复性劳动过多，每次打包都是运行打包脚本，上传打包后的文件夹，运行远程启动脚本</li><li>容易出错，假设现有的环境是两套（演示与生产），那么远端运行脚本需要根据环境的不同来传递不同的环境变量，人为错误极易发生</li></ul><h3 id="理想环境"><a href="#理想环境" class="headerlink" title="理想环境"></a>理想环境</h3><ul><li><strong>程序员</strong>提交代码至dev分支，此时触发演示环境的打包部署程序</li><li><strong>技术老大</strong>提交代码至master分支，此时触发生产环境的打包部署程序</li><li>打包成功/失败/中断通知到钉钉工作群</li></ul><h1 id="Devops实践"><a href="#Devops实践" class="headerlink" title="Devops实践"></a>Devops实践</h1><h2 id="Windows10环境搭建"><a href="#Windows10环境搭建" class="headerlink" title="Windows10环境搭建"></a>Windows10环境搭建</h2><ul><li>java：<a href="https://www.cnblogs.com/smyhvae/p/3788534.html" target="_blank" rel="noopener">JDK开发环境搭建及环境变量配置</a></li><li>tomcat：<a href="https://blog.csdn.net/haishu_zheng/article/details/50768272" target="_blank" rel="noopener">Windows安装和配置Tomcat</a></li><li>git：<a href="https://www.jianshu.com/p/414ccd423efc" target="_blank" rel="noopener">Git安装教程</a></li><li>jenkins<ul><li><a href="http://mirrors.jenkins-ci.org/war/latest/jenkins.war" target="_blank" rel="noopener">点此下载jenkins的war包</a></li><li>将jenkins.war复制到tomcat服务器的webapps目录下</li><li>配置jenkins的工作目录，在我的电脑-属性-高级系统设置-环境变量-添加系统变量JENKINS_HOME，内容是一个空的文件夹，作为jenkins的工作目录。<strong>如果不想设置系统环境变量</strong>也可以修改加载有jenkins.war的tomcat目录下的conf\context.xm文件，如下设置JENKINS_HOME</li><li>访问jenkins的主页<a href="http://localhost:8080/jenkins" target="_blank" rel="noopener">http://localhost:8080/jenkins</a></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- tomcat context.xml 环境变量设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置jenkins的工作目录 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Environment</span> <span class="attr">name</span>=<span class="string">"JENKINS_HOME"</span> <span class="attr">value</span>=<span class="string">"C:/jenkins/"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CentOS7-3环境搭建"><a href="#CentOS7-3环境搭建" class="headerlink" title="CentOS7.3环境搭建"></a>CentOS7.3环境搭建</h2><p>&emsp;&emsp;在CentOS7下搭建jenkins和Windows环境差不多，jenkins是一个依赖于web容易的war包，所以只要有java与tomcat环境即可</p><h3 id="git环境"><a href="#git环境" class="headerlink" title="git环境"></a>git环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断git是否已存在 打印内容则代表存在</span></span><br><span class="line">git --version</span><br><span class="line"><span class="comment"># 不存在则安装 出现complete说明安装成功</span></span><br><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h3 id="jdk环境"><a href="#jdk环境" class="headerlink" title="jdk环境"></a>jdk环境</h3><ol><li>jdk1.8下载：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">点此下载</a></li></ol><p><img src="https://resources.chenjianhui.site/2019-03-01-jdk-downloads.png" alt></p><ol start="2"><li>解压配置</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /usr/java</span><br><span class="line"><span class="comment"># 使用Xftp将下载的jdk放到此目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/java</span><br><span class="line"><span class="comment"># 解压jdk</span></span><br><span class="line">tar -zxvf jdk-8u201-linux-x64.tar.gz </span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 文件末尾添加java的环境变量</span></span><br><span class="line"></span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_201</span><br><span class="line">JRE_HOME=/usr/java/jdk1.8.0_201/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使得配置生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 测试配置</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="tomcat环境"><a href="#tomcat环境" class="headerlink" title="tomcat环境"></a>tomcat环境</h3><ol><li>tomcat8下载：<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">点此下载</a></li></ol><p><img src="https://resources.chenjianhui.site/2019-03-01-tomcat-downloads.png" alt></p><ol start="2"><li>解压配置</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Xftp将下载的tomcat放到此目录</span></span><br><span class="line">mkdir /usr/tomcat</span><br><span class="line"><span class="built_in">cd</span> /usr/tomcat</span><br><span class="line"><span class="comment"># 解压tomcat</span></span><br><span class="line">tar -zxvf apache-tomcat-8.5.38.tar.gz </span><br><span class="line"><span class="comment"># 测试运行</span></span><br><span class="line"><span class="built_in">cd</span> apache-tomcat-8.5.38</span><br><span class="line">sh bin/startup.sh</span><br><span class="line"><span class="comment"># 检测服务是否成功启动 打印了进程即说明启动成功</span></span><br><span class="line">netstat -nlp|grep 8080</span><br><span class="line"><span class="comment"># 稍微清理一下tomcat 删除没有用的项目</span></span><br><span class="line">rm -rf /usr/tomcat/apache-tomcat-8.5.38/webapps/*</span><br><span class="line"><span class="comment"># 配置自动启动 /etc/rc.d/init.d 为启动运行脚本的目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/rc.d/init.d</span><br><span class="line"><span class="comment"># 创建自启动脚本</span></span><br><span class="line">touch tomcat</span><br><span class="line"><span class="comment"># 写入脚本信息</span></span><br><span class="line">vim tomcat</span><br><span class="line"><span class="comment"># 脚本信息如下 以下注释信息也需要复制进脚本文件 </span></span><br><span class="line"><span class="comment"># 如果缺少了chkconfig:234 20 80这个注释会报错无法识别为自启脚本</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#chkconfig:234 20 80  </span></span><br><span class="line"><span class="comment">#description:tomcat</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_201</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span> </span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line">tomcat_path=/usr/tomcat/apache-tomcat-8.5.38/bin</span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"start tomcat service.."</span></span><br><span class="line">                sh <span class="variable">$&#123;tomcat_path&#125;</span>/startup.sh</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予权限</span></span><br><span class="line">chmod 755 tomcat</span><br><span class="line"><span class="comment"># 注册tomcat服务自启</span></span><br><span class="line">chkconfig --add tomcat</span><br><span class="line"><span class="comment"># 测试服务是否能够自启 先停止运行中的tomcat</span></span><br><span class="line">sh /usr/tomcat/apache-tomcat-8.5.38/bin/shutdown.sh</span><br><span class="line">service tomcat start</span><br><span class="line">netstat -nlp|grep 8080</span><br><span class="line"><span class="comment"># 查看所有注册自启的服务</span></span><br><span class="line">chkconfig</span><br></pre></td></tr></table></figure><h3 id="jenkins环境"><a href="#jenkins环境" class="headerlink" title="jenkins环境"></a>jenkins环境</h3><ol><li><p>jenkins下载：<a href="http://mirrors.jenkins-ci.org/war/latest/jenkins.war" target="_blank" rel="noopener">点此下载</a></p></li><li><p>配置</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /usr/jenkins</span><br><span class="line"><span class="comment"># 使用Xftp将下载的tomcat放到此目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/jenkins</span><br><span class="line"><span class="comment"># 复制jenkins.war至tomcat/webapps目录</span></span><br><span class="line">cp jenkins.war /usr/tomcat/apache-tomcat-8.5.38/webapps</span><br><span class="line"><span class="comment"># jenkins.war会自动解包启动 进入tomcat/webapps目录查看 jenkins.war已经解包成了文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /usr/tomcat/apache-tomcat-8.5.38/webapps</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 修改tomcat环境配置将jenkins的工作目录切换至/home/app/jenkins</span></span><br><span class="line">vi /usr/tomcat/apache-tomcat-8.5.38/conf/context.xml</span><br><span class="line"><span class="comment"># Context标签下添加以下内容</span></span><br><span class="line"></span><br><span class="line">&lt;Environment name=<span class="string">"JENKINS_HOME"</span> value=<span class="string">"/home/app/jenkins"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启tomcat</span></span><br><span class="line"><span class="built_in">cd</span> /usr/tomcat/apache-tomcat-8.5.38</span><br><span class="line">sh bin/shutdown.sh</span><br><span class="line">sh bin/startup.sh</span><br><span class="line"><span class="comment"># 检查工作目录切换是否成功 有文件即成功</span></span><br><span class="line"><span class="built_in">cd</span> /home/app/jenkins</span><br><span class="line"><span class="comment"># 清空原先的工作空间 jenkins默认工作空间为 /root/.jenkins</span></span><br><span class="line">rm -rf /root/.jenkins</span><br></pre></td></tr></table></figure><h2 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h2><h3 id="Jenkins的初始化"><a href="#Jenkins的初始化" class="headerlink" title="Jenkins的初始化"></a>Jenkins的初始化</h3><blockquote><p>第一次进入jenkins时会要求使用初始密码解锁，按照提示操作就行了</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-init-password.png" alt></p><blockquote><p>之后会提示你安装插件，在这里我们采用默认安装必要的插件即可，其他的插件我们可以在系统内部再去安装</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-customize-jenkins.png" alt></p><blockquote><p>耐心等待插件安装完毕</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-default-install.png" alt></p><blockquote><p>初始化完成，配置管理员用户</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-init-admin-user.png" alt></p><blockquote><p>配置jenkins实例地址，举个例子解释实例配置的地址用处</p><p>假设你做了项目打包成功或者失败的通知，jenkins构建的默认通知信息里会带有一个进入系统的链接地址，方便用户直接从<strong>邮件/钉钉</strong>等地方进入系统查看构建详情，这个地址即是此处配置的实例地址</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-url-config.png" alt></p><blockquote><p>所有配置完成后，成功进入系统</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-config-success.png" alt></p><h3 id="Jenkins的环境配置"><a href="#Jenkins的环境配置" class="headerlink" title="Jenkins的环境配置"></a>Jenkins的环境配置</h3><h4 id="环境需求分析"><a href="#环境需求分析" class="headerlink" title="环境需求分析"></a>环境需求分析</h4><ol><li>拉取远端master分支代码：<strong>Git插件</strong></li><li>运行前端打包脚本：<strong>Nodejs环境</strong></li><li>运行后端打包脚本：<strong>Java环境+Maven插件</strong></li><li>推送装有构建代码的文件夹：<strong>SSH文件传输插件</strong> </li><li>运行远程启动脚本：<strong>SSH脚本运行插件</strong></li></ol><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>&emsp;&emsp;对应<strong>jenkins/系统管理/插件管理</strong>目录，根据上述的打包流程得出插件需求，在<a href="https://www.baidu.com" target="_blank" rel="noopener">baidu</a>/<a href="https://www.google.com" target="_blank" rel="noopener">google</a>搜索得到jenkins上对应的插件名称，选择并安装它们。</p><ul><li>插件的选择<ul><li><strong>Publish Over SSH</strong>：基于SSH协议的文件上传插件</li><li><strong>Nodejs</strong>：nodejs运行环境</li><li><strong>Dingding</strong>：钉钉推送通知</li><li><strong>Maven Integration</strong>：Maven插件</li></ul></li><li>插件的安装<ul><li>进入jenkins-系统管理-插件管理</li><li>选择available（可选插件）标签</li><li>搜索出以上选择的插件，勾选之后点击直接安装</li></ul></li></ul><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-plugin-manager-install.png" alt></p><h4 id="配置全局工具"><a href="#配置全局工具" class="headerlink" title="配置全局工具"></a>配置全局工具</h4><p>&emsp;&emsp;对应<strong>jenkins/系统管理/全局工具配置</strong>目录，主要是配置打包所需的环境，如Java/Git/Maven等等，如果系统自带环境可以填写系统环境，如果没有可以采用jenkins自动安装的方式。</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-global-tools-setting.png" alt></p><ol><li>JDK配置</li></ol><blockquote><p>tips：如果找不到java的安装目录可以使用 which java 查看</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-global-tools-setting-jdk.png" alt></p><ol start="2"><li>Git配置</li></ol><blockquote><p>tips：如果找不到git的安装目录可以使用 which git 查看</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-global-tools-setting-git.png" alt></p><ol start="3"><li>Maven配置</li></ol><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-global-tools-setting-maven.png" alt></p><ol start="4"><li>NodeJS配置</li></ol><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-global-tools-setting-nodejs.png" alt></p><h4 id="配置文件管理"><a href="#配置文件管理" class="headerlink" title="配置文件管理"></a>配置文件管理</h4><p>&emsp;&emsp;对应<strong>jenkins/系统管理/Managed files</strong>目录，主要是管理自定义的配置文件，如Maven的settings.xml，Npm的npmrc.config文件等等，我们在这主要配置一下Maven和Npm的仓库镜像，使其切换到国内的阿里云的Maven镜像和淘宝的Npm镜像。</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-managed-files.png" alt></p><ol><li>Maven settings.xml</li></ol><p>&emsp;&emsp;新增Maven settings.xml配置文件，在mirrors标签下添加以下配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-managed-files-maven.png" alt></p><ol start="2"><li>Npm config file</li></ol><p>&emsp;&emsp;新增Npm config file配置文件，修改registry的配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-managed-files-npm.png" alt></p><h4 id="配置全局凭据"><a href="#配置全局凭据" class="headerlink" title="配置全局凭据"></a>配置全局凭据</h4><p>&emsp;&emsp;对应<strong>jenkins/凭据/系统/全局凭据</strong>目录，主要是用于添加如gitlab/ssh等受限访问应用的信任凭据。</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-unrestricted-add.png" alt></p><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><ol><li><strong>Publish over SSH</strong>插件</li></ol><p>&emsp;&emsp;该插件的配置在<strong>jenkins/系统管理/系统设置</strong>目录，主要的配置如下：</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-publish-over-ssh-config.png" alt></p><p>&emsp;&emsp;高级配置下还可以配置SSH端口，重置默认设置等等，这里不做过多讲解</p><ol start="2"><li><strong>Dingding通知</strong>使用</li></ol><p>&emsp;&emsp;钉钉通知的配置在任务的配置项中，配置起来较为简单（比微信通知简单太多）只需要两步操作。</p><p>（1）获取钉钉通知自定义机器人webhook的access_token，<a href="https://open-doc.dingtalk.com/docs/doc.htm?treeId=257&amp;articleId=105735&amp;docType=1" target="_blank" rel="noopener">点此进入</a>钉钉开放平台获取配置帮助</p><p>（2）在任务中配置通知<br><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-dingding-setting.png" alt></p><p>&emsp;&emsp;通知效果如图，点击即可进入jenkins管理平台查看详情</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-dingding-notice.png" alt></p><h3 id="Jenkins的任务配置"><a href="#Jenkins的任务配置" class="headerlink" title="Jenkins的任务配置"></a>Jenkins的任务配置</h3><p>&emsp;&emsp;至此基于一个前后端分离项目的自动打包配置已经基本完成，现在我们使用jenkins构建一个任务来测试配置是否成功，本次构建任务是基于我的一个开源模板项目<a href="https://github.com/calebman/server-front-separate.git" target="_blank" rel="noopener">server-front-separate</a>来进行。</p><h4 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h4><p>&emsp;&emsp;进入jenkins根目录点击新建任务<br><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-new-task.png" alt></p><p>&emsp;&emsp;任务新建成功<br><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-list.png" alt></p><h4 id="任务基础配置"><a href="#任务基础配置" class="headerlink" title="任务基础配置"></a>任务基础配置</h4><p>&emsp;&emsp;本次的基础配置我们需要达到任务能够自动化打包的效果，为达到此效果我们至少需要配置以下几项内容：</p><ul><li>源码管理</li><li>构建环境</li><li>后端构建步骤</li><li>前端构建步骤</li></ul><ol><li>源码管理</li></ol><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-git.png" alt></p><ol start="2"><li>构建环境</li></ol><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-build-env-node.png" alt></p><ol start="3"><li>后端构建步骤</li></ol><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-build-maven.png" alt></p><ol start="4"><li>前端构建步骤</li></ol><blockquote><p>linux环境下采用Shell脚本构建，换行分割指令</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-build-node-linux.png" alt></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> front/</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">npm i</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><blockquote><p>Windows环境下采用批处理脚本构建，使用&amp;与&amp;&amp;来连接指令，&amp;代表下一条指令必定执行，&amp;&amp;代表当上一条指令出现错误下一条指令不执行</p></blockquote><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-build-node-windows.png" alt></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> front/ &amp; node -v &amp; npm -v &amp; npm i &amp;&amp; npm run build</span><br></pre></td></tr></table></figure><h4 id="构建运行"><a href="#构建运行" class="headerlink" title="构建运行"></a>构建运行</h4><p>&emsp;&emsp;基础配置完成后，我们进入项目主页进行一次构建测试</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-building.png" alt></p><p>&emsp;&emsp;构建成功后进入任务的工作空间，可以查看到项目已经打包成功，项目的目录结构描述详见我的另一篇博客<a href="/2019-02-23-server-front-separate/">前后端分离开发模式的实践总结</a></p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-build-success.png" alt></p><h3 id="Jenkins任务自动化"><a href="#Jenkins任务自动化" class="headerlink" title="Jenkins任务自动化"></a>Jenkins任务自动化</h3><p>&emsp;&emsp;至此项目已经能够通过jenkins平台来进行打包操作了，但是这还远远没达到<strong>自动化</strong>的概念，我们的目标是通过<strong>git代码提交操作来触发构建</strong>并且<strong>自动部署</strong>到生产/演示服务器上，所以接下来进行自动化的配置工作</p><h4 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h4><p>&emsp;&emsp;自动构建是指通过Git服务器的Webhooks来触发Jenkins的打包构建流程，在这里我们将实现以下流程：</p><ul><li>更新代码至github项目的master分支</li><li>jenkins开始构建代码</li></ul><p>&emsp;&emsp;jenkins默认对github的webhook有支持使得这个流程的配置非常简单，jenkins的webhook触发地址为<strong>${JENKINS_URL}/github-webhook/</strong>，其中JENKINS_URL为jenkins服务在公网的根目录地址，可以在<strong>jenkins/系统管理/系统设置</strong>处修改此默认地址</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-github-webhook-setting.png" alt></p><p>&emsp;&emsp;得到Webhook地址后我们只需要在github的项目Settings选项卡上添加此地址即可，github默认触发Webhook的逻辑是push代码时即触发</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-github-add-webhook.png" alt></p><p>&emsp;&emsp;当然，别忘记了在jenkins的任务中勾选Github hook触发构建</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-github-hook-setting.png" alt></p><h4 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h4><p>&emsp;&emsp;自动部署是指在代码构建完成后将生成的发布代码推送到远程服务器中并启动它们，流程如下：</p><ul><li>代码构建成功后上传打包目录</li><li>运行远程脚本重启服务</li></ul><p>&emsp;&emsp;上文我们讲到<strong>Publish Over SSH</strong>这个插件能够远程推送代码并运行脚本，自动部署的功能即依赖此插件，配置如下：</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-task-publish-over-ssh-setting.png" alt></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义脚本执行地址</span></span><br><span class="line"><span class="built_in">export</span> COMMAND_PATH=/home/app/application/server-front-separate/bin</span><br><span class="line"><span class="comment"># 将所有脚本文件转换为UNIX格式</span></span><br><span class="line">sed -i <span class="string">'s/\r//'</span> <span class="variable">$COMMAND_PATH</span>/*.sh</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sh <span class="variable">$COMMAND_PATH</span>/stop.sh <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sh <span class="variable">$COMMAND_PATH</span>/start.sh <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="构建通知"><a href="#构建通知" class="headerlink" title="构建通知"></a>构建通知</h4><p>&emsp;&emsp;在这里我们使用钉钉来做通知功能，钉钉通知的配置在上文已经介绍过了，通知的的类型有四种，我们需要哪种类型的通知直接勾选即可，四种通知类型正好对应jenkins任务构建的三种状态：</p><ul><li>成功：构建步骤与构建后的操作全部成功，对应<strong>构建成功时通知</strong></li><li>失败：构建步骤失败，对应<strong>构建失败时通知</strong></li><li>不稳定：构建步骤成功但构建后的操作存在失败的情况，对应<strong>构建中断时通知</strong></li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h4><p>&emsp;&emsp;在<strong>jenkins/系统管理/系统设置</strong>中添加全局属性：</p><p><img src="https://resources.chenjianhui.site/2019-03-01-jenkins-global-env-config.png" alt></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/houyefeng/article/details/51027885" target="_blank" rel="noopener">Jenkins——应用篇——插件使用——Publish over SSH</a><br><a href="https://blog.csdn.net/workdsz/article/details/77947183" target="_blank" rel="noopener">jenkins 集成钉钉机器人</a><br><a href="https://blog.csdn.net/ZZY1078689276/article/details/77839045" target="_blank" rel="noopener">Jenkins之解决乱码问题</a><br><a href="https://blog.csdn.net/qq_21768483/article/details/80177920" target="_blank" rel="noopener">Jenkins与Github集成 webhook配置</a></p>]]></content>
    
    <summary type="html">
    
      Jenkins+Git+Maven+Nodejs实现前后端分离项目的自动化运维
    
    </summary>
    
      <category term="运维" scheme="https://chenjianhui.site/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="jenkins" scheme="https://chenjianhui.site/tags/jenkins/"/>
    
      <category term="maven" scheme="https://chenjianhui.site/tags/maven/"/>
    
      <category term="nodejs" scheme="https://chenjianhui.site/tags/nodejs/"/>
    
      <category term="devops" scheme="https://chenjianhui.site/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离开发模式的实践总结</title>
    <link href="https://chenjianhui.site/2019-02-23-server-front-separate/"/>
    <id>https://chenjianhui.site/2019-02-23-server-front-separate/</id>
    <published>2019-02-23T03:03:25.000Z</published>
    <updated>2019-04-08T02:31:45.865Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2019-02-23-home-pic.png" alt><br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp; 实践前后端分离的开发模式已经有两年左右的时间了，对于前后端分离开发模式的概念在这里不做过多解释，本文主要是总结开发模式并构建一个较为成熟的前后端分离应用</p><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>&emsp;&emsp; 关于技术选型方面线下国内比较流行的主要是SpringBoot+Vuejs这个技术栈，所以本文将基于这个技术栈来讲解，涉及到的技术主要有</p><ul><li>环境<ul><li>Java</li><li>Maven</li><li>Nodejs</li><li>Nginx</li></ul></li><li>前端<ul><li>vue-cli</li></ul></li><li>后端<ul><li>SpringBoot</li></ul></li></ul><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>&emsp;&emsp; 这里简要引用Windows下的环境搭建，关于Linux(Centos7)的环境搭建会再部署架构中讲到</p><ul><li>Java : <a href="https://www.cnblogs.com/smyhvae/p/3788534.html" target="_blank" rel="noopener">JDK开发环境搭建及环境变量配置</a></li><li>Maven :<a href="https://www.cnblogs.com/youqc/archive/2017/10/15/7673913.html" target="_blank" rel="noopener">Maven开发环境搭建</a></li><li>Nodejs :<a href="https://www.cnblogs.com/mq0036/p/5243209.html" target="_blank" rel="noopener">NodeJS、NPM安装配置与测试步骤(windows版本)</a></li><li>Nginx :<a href="https://www.cnblogs.com/jiangwangxiang/p/8481661.html" target="_blank" rel="noopener">windows下nginx的安装及使用</a></li></ul><h1 id="构建前后端分离工程"><a href="#构建前后端分离工程" class="headerlink" title="构建前后端分离工程"></a>构建前后端分离工程</h1><h2 id="目录规划"><a href="#目录规划" class="headerlink" title="目录规划"></a>目录规划</h2><p>&emsp;&emsp;整体目录主要分为三块，如下所示</p><p><img src="https://resources.chenjianhui.site/2019-02-23-root-folder.png" alt="整体目录结构"></p><p>&emsp;&emsp;打包后的目录主要分为三块，如下所示<br><img src="https://resources.chenjianhui.site/2019-02-23-dist-folder.png" alt="项目打包目录"></p><h2 id="后端工程"><a href="#后端工程" class="headerlink" title="后端工程"></a>后端工程</h2><p>&emsp;&emsp;后端工程主要基于SpringBoot脚手架搭建，SpringBoot基础的集成环境搭建可以参考我的另一篇博客<a href="/2018-02-21-build-springboot-env/">SpringBoot集成环境搭建</a></p><p>&emsp;&emsp;首先创建一个只有Web功能的SpringBoot项目，修改其maven打包的配置实现以下两个功能</p><ul><li>将打包的jar文件移动至dist目录下</li><li>将多环境配置文件从jar内部移动至外部的dist/config目录下</li></ul><p>&emsp;&emsp;此项修改主要依赖于以下两个maven插件</p><ul><li><a href="http://maven.apache.org/plugins/maven-resources-plugin" target="_blank" rel="noopener">maven-resources-plugin</a></li><li><a href="http://maven.apache.org/plugins/maven-antrun-plugin" target="_blank" rel="noopener">maven-antrun-plugin</a></li></ul><p>&emsp;&emsp;详细的插件配置如下，在server/pom.xml的plugins标签下添加如下代码<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--复制配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.basedir&#125;/../dist/config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--移动并重命名jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">move</span> <span class="attr">file</span>=<span class="string">"$&#123;project.basedir&#125;/target/$&#123;project.artifactId&#125;-$&#123;project.version&#125;.$&#123;project.packaging&#125;"</span> <span class="attr">tofile</span>=<span class="string">"$&#123;project.basedir&#125;/../dist/$&#123;project.artifactId&#125;-$&#123;project.version&#125;.$&#123;project.packaging&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;进入到server/pom.xml同级目录，执行mvn clean package指令，打包成功会在dist目录下生成编译后的jar文件，dist/config目录下生成项目的配置文件</p><h2 id="前端工程"><a href="#前端工程" class="headerlink" title="前端工程"></a>前端工程</h2><p>&emsp;&emsp;前端工程主要基于vue-cli脚手架创建，vue项目的环境搭建可以参照<a href="http://www.cnblogs.com/superlizhao/p/8664326.html" target="_blank" rel="noopener">vue-用Vue-cli从零开始搭建一个Vue项目</a><br>&emsp;&emsp;现在创建一个基础的vue项目，修改config/index.js配置以实现打包的静态资源生成至dist/html目录</p><p><img src="https://resources.chenjianhui.site/2019-02-23-front-build-config.png" alt="前端打包配置修改"></p><p>&emsp;&emsp;进入到front/package.json同级目录，执行npm run build指令，打包成功会在dist/html目录生成静态文件</p><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><h3 id="来个接口"><a href="#来个接口" class="headerlink" title="来个接口"></a>来个接口</h3><p>&emsp;&emsp;编写一个获取用户信息的接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前登录用户的个人信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前登录用户的个人信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user/me"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">me</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        result.put(<span class="string">"roles"</span>, Arrays.asList(<span class="string">"admin"</span>, <span class="string">"normal"</span>, <span class="string">"none"</span>));</span><br><span class="line">        result.put(<span class="string">"depts"</span>, Arrays.asList(<span class="string">"办公室"</span>, <span class="string">"组织部"</span>));</span><br><span class="line">        result.put(<span class="string">"menus"</span>, Arrays.asList(<span class="string">"工作台"</span>, <span class="string">"系统管理"</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>&emsp;&emsp;配置以下前端工程的代理转发，用于解决开发环境接口调试的跨域问题<br><img src="https://resources.chenjianhui.site/2019-02-23-front-proxy-config.png" alt></p><h3 id="写个页面"><a href="#写个页面" class="headerlink" title="写个页面"></a>写个页面</h3><p>&emsp;&emsp;写个前端页面测试后端接口，进入front/package.json同级目录执行npm i axios -s，修改HelloWord.vue组件为如下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;h1 v-<span class="keyword">if</span>=<span class="string">"loading"</span>&gt;&#123;&#123; <span class="string">'正在加载用户信息'</span> &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h1 v-else-if="errMsg"&gt;&#123;&#123; errMsg &#125;&#125;&lt;/</span>h1&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">else</span>&gt;</span><br><span class="line">      &lt;p&gt;username: &#123;&#123;userInfo.username&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;roles: &#123;&#123;userInfo.roles&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;p&gt;depts: &#123;&#123;userInfo.depts&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;menus: &#123;&#123;userInfo.menus&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import axios from 'axios'</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'HelloWorld',</span></span><br><span class="line"><span class="regexp">  data () &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      loading: false,</span></span><br><span class="line"><span class="regexp">      userInfo: &#123;</span></span><br><span class="line"><span class="regexp">        username: '',</span></span><br><span class="line"><span class="regexp">        roles: [],</span></span><br><span class="line"><span class="regexp">        depts: [],</span></span><br><span class="line"><span class="regexp">        menus: []</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      errMsg: null</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  created () &#123;</span></span><br><span class="line"><span class="regexp">    this.loading = true</span></span><br><span class="line"><span class="regexp">    axios.get('/</span>api/user/me<span class="string">').then(response =&gt; &#123;</span></span><br><span class="line"><span class="string">      this.userInfo = response.data</span></span><br><span class="line"><span class="string">    &#125;).catch(err =&gt; &#123;</span></span><br><span class="line"><span class="string">      console.error(err)</span></span><br><span class="line"><span class="string">      this.errMsg = err</span></span><br><span class="line"><span class="string">    &#125;).finally(() =&gt; &#123; this.loading = false &#125;)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string">h1,</span></span><br><span class="line"><span class="string">h2 &#123;</span></span><br><span class="line"><span class="string">  font-weight: normal;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p>进入测试链接<a href="http://localost:8081" target="_blank" rel="noopener">http://localost:8081</a></p><h1 id="单点部署"><a href="#单点部署" class="headerlink" title="单点部署"></a>单点部署</h1><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>&emsp;&emsp;分离部署主要依赖于nginx来完成，利用nginx来分发前后端的内容，nginx的配置如下<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user root;# linux下必须有此配置 不然会导致403权限不足</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  logs/access.log  main;</span><br><span class="line">    <span class="attribute">error_log</span> logs/error.log <span class="literal">error</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  localhost;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$application_path</span> C:/workspace/java/server-front-separate;<span class="comment"># 这里的父级路径需要根据项目路径设置</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /api &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8080/;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">alias</span> <span class="variable">$application_path</span>/dist/html/;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html <span class="literal">last</span>;<span class="comment"># 解决页面刷新404问题</span></span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="打包前后端应用"><a href="#打包前后端应用" class="headerlink" title="打包前后端应用"></a>打包前后端应用</h2><ul><li>前端应用: 进入front/package.json同级目录，执行npm run build指令</li><li>后端应用: 进入server/pom.xml同级目录，执行mvn clean package指令</li></ul><h2 id="编写快速启动脚本（支持多环境）"><a href="#编写快速启动脚本（支持多环境）" class="headerlink" title="编写快速启动脚本（支持多环境）"></a>编写快速启动脚本（支持多环境）</h2><ul><li>linux下启动脚本start.sh</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 常量定义</span></span><br><span class="line"><span class="built_in">export</span> BIN_PATH=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`;<span class="built_in">pwd</span>)</span><br><span class="line"><span class="built_in">echo</span> BIN_PATH:[<span class="variable">$BIN_PATH</span>]</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$BIN_PATH</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">export</span> CONTEXT_PATH=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">echo</span> CONTEXT_PATH:[<span class="variable">$CONTEXT_PATH</span>]</span><br><span class="line"><span class="built_in">export</span> LOG_PATH=/data/logs/sso</span><br><span class="line"><span class="built_in">echo</span> LOG_PATH:[<span class="variable">$LOG_PATH</span>]</span><br><span class="line"><span class="comment"># 需要指定启动的模式是test，还是prod，默认是test，如果不指定的话</span></span><br><span class="line">ACTION_MODE=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$ACTION_MODE</span>"</span> = <span class="string">""</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">ACTION_MODE=<span class="built_in">test</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> STARTING APPLICATION ACTION_MODE:[<span class="variable">$ACTION_MODE</span>]</span><br><span class="line"><span class="comment"># 判断log文件夹是否存在 不存在则创建</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$LOG_PATH</span> ]; <span class="keyword">then</span></span><br><span class="line">  mkdir <span class="variable">$LOG_PATH</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 删除历史的server.log文件</span></span><br><span class="line">rm -f <span class="variable">$LOG_PATH</span>/server.log</span><br><span class="line"><span class="comment"># 后台启动应用 并输出控制台日志</span></span><br><span class="line">nohup java -jar server-0.0.1-SNAPSHOT.jar --spring.profiles.active=<span class="variable">$ACTION_MODE</span> &gt;&gt; <span class="variable">$LOG_PATH</span>/server.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># 显示输出前二十行的日志</span></span><br><span class="line">head -n 20 <span class="variable">$LOG_PATH</span>/server.log</span><br></pre></td></tr></table></figure><ul><li>windows下启动脚本start.bat</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 设置jar名称</span><br><span class="line"><span class="built_in">set</span> JAR_NAME=server-0.0.1-SNAPSHOT</span><br><span class="line">:: 常量定义</span><br><span class="line"><span class="built_in">set</span> BIN_PATH=%~dp0</span><br><span class="line"><span class="built_in">echo</span> BIN_PATH:[%BIN_PATH%]</span><br><span class="line"><span class="built_in">cd</span> %BIN_PATH%</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">set</span> CONTEXT_PATH=%<span class="built_in">cd</span>%</span><br><span class="line"><span class="built_in">echo</span> CONTEXT_PATH:[%CONTEXT_PATH%]</span><br><span class="line"><span class="built_in">echo</span> JAR_NAME:[%JAR_NAME%]</span><br><span class="line">:: 需要指定启动的模式是<span class="built_in">test</span>，还是prod，默认是<span class="built_in">test</span>，如果不指定的话</span><br><span class="line"><span class="built_in">set</span> /p ACTION_MODE_INPUT=请输入启动环境，不输入采用默认环境[<span class="built_in">test</span>]:</span><br><span class="line"><span class="keyword">if</span> not <span class="string">"%ACTION_MODE_INPUT%"</span> equ <span class="string">""</span> (<span class="built_in">set</span> ACTION_MODE=%ACTION_MODE_INPUT%) <span class="keyword">else</span> (<span class="built_in">set</span> ACTION_MODE=<span class="built_in">test</span>)</span><br><span class="line"><span class="built_in">echo</span> STARTING APPLICATION ACTION_MODE:%ACTION_MODE%</span><br><span class="line"><span class="built_in">set</span> PROCESS_NAME=JAVA_APP_%JAR_NAME%_%ACTION_MODE%</span><br><span class="line">title %PROCESS_NAME%</span><br><span class="line"><span class="built_in">echo</span> PROCESS_NAME:[%PROCESS_NAME%]</span><br><span class="line">:: 后台启动应用 并输出控制台日志</span><br><span class="line">java -jar %JAR_NAME%.jar --spring.profiles.active=%ACTION_MODE%</span><br></pre></td></tr></table></figure><ul><li>linux下关闭脚本stop.sh</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 需要指定停止的模式是test，还是prod，默认是test，如果不指定的话默认取test</span></span><br><span class="line">ACTION_MODE=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$ACTION_MODE</span>"</span> = <span class="string">""</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">ACTION_MODE=<span class="built_in">test</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> STOPPING APPLICATION ACTION_MODE:[<span class="variable">$ACTION_MODE</span>]</span><br><span class="line">pid=`ps -ef | grep server-0.0.1-SNAPSHOT.jar | grep <span class="variable">$ACTION_MODE</span> | grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="comment"># 判断进程是否再运行 在运行则终止</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$pid</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">   <span class="built_in">echo</span> application stop success</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> application already stop</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>windows下关闭脚本stop.bat</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 设置jar名称</span><br><span class="line"><span class="built_in">set</span> JAR_NAME=server-0.0.1-SNAPSHOT</span><br><span class="line">:: 需要指定终止的模式是<span class="built_in">test</span>，还是prod，默认是<span class="built_in">test</span>，如果不指定的话</span><br><span class="line"><span class="built_in">set</span> /p ACTION_MODE_INPUT=请输入关闭应用的运行环境，不输入采用默认环境[<span class="built_in">test</span>]:</span><br><span class="line"><span class="keyword">if</span> not <span class="string">"%ACTION_MODE_INPUT%"</span> equ <span class="string">""</span> (<span class="built_in">set</span> ACTION_MODE=%ACTION_MODE_INPUT%) <span class="keyword">else</span> (<span class="built_in">set</span> ACTION_MODE=<span class="built_in">test</span>)</span><br><span class="line"><span class="built_in">echo</span> STARTING APPLICATION ACTION_MODE:%ACTION_MODE%</span><br><span class="line"><span class="built_in">echo</span> JAR_NAME:[%JAR_NAME%]</span><br><span class="line"><span class="built_in">set</span> PROCESS_NAME=JAVA_APP_%JAR_NAME%_%ACTION_MODE%</span><br><span class="line"><span class="built_in">echo</span> PROCESS_NAME:[%PROCESS_NAME%]</span><br><span class="line">:: 杀死对应进程    </span><br><span class="line">tasklist /nh /<span class="keyword">fi</span> <span class="string">"WINDOWTITLE eq %PROCESS_NAME%"</span>|find /i <span class="string">"cmd.exe"</span> &gt;nul</span><br><span class="line"><span class="keyword">if</span> ERRORLEVEL 1 (<span class="built_in">echo</span> Application already stop) <span class="keyword">else</span> (taskkill /<span class="keyword">fi</span> <span class="string">"WINDOWTITLE eq %PROCESS_NAME%"</span> &gt;nul &amp; <span class="built_in">echo</span> Application stop success)</span><br><span class="line"><span class="built_in">echo</span> This window will close <span class="keyword">in</span> 10 seconds</span><br><span class="line">ping 127.1 -n 11 &gt;nul</span><br></pre></td></tr></table></figure><h2 id="启动nginx以及后端服务"><a href="#启动nginx以及后端服务" class="headerlink" title="启动nginx以及后端服务"></a>启动nginx以及后端服务</h2><ul><li>windwos<ul><li>运行nginx.exe</li><li>运行dist/bin/start.bat</li></ul></li><li>linux<ul><li>nginx -s start</li><li>dist/bin/start.sh prod</li></ul></li></ul><h1 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h1><p><a href="https://github.com/calebman/server-front-separate" target="_blank" rel="noopener">https://github.com/calebman/server-front-separate</a></p>]]></content>
    
    <summary type="html">
    
      SpringBoot+Vuejs+Nginx从开发至部署构建一个成熟的前后端分离应用
    
    </summary>
    
      <category term="前后端分离" scheme="https://chenjianhui.site/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
    
      <category term="SpringBoot" scheme="https://chenjianhui.site/tags/SpringBoot/"/>
    
      <category term="vuejs" scheme="https://chenjianhui.site/tags/vuejs/"/>
    
      <category term="Nginx" scheme="https://chenjianhui.site/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="https://chenjianhui.site/2019-02-21-hello-hexo/"/>
    <id>https://chenjianhui.site/2019-02-21-hello-hexo/</id>
    <published>2019-02-21T07:28:56.000Z</published>
    <updated>2019-03-21T03:38:40.022Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2019-02-21-home-pic.jpg" alt></p><a id="more"></a><p>从掘金切换到Hexo，多读多看多积累，崭新的开始</p><p>随手记一下Markdown的相关语法</p><p>希望以后能够养成随手记的习惯</p><p>毕竟</p><p>好记性 不如 烂笔头</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 内容 （一级标题） </span><br><span class="line">## 内容 （二级标题） </span><br><span class="line">### 内容 （三级标题） </span><br><span class="line">#### 内容 （四级标题） </span><br><span class="line">##### 内容 （五级标题） </span><br><span class="line">###### 内容 （六级标题）</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><h1 id="内容-（一级标题）"><a href="#内容-（一级标题）" class="headerlink" title="内容 （一级标题）"></a>内容 （一级标题）</h1><h2 id="内容-（二级标题）"><a href="#内容-（二级标题）" class="headerlink" title="内容 （二级标题）"></a>内容 （二级标题）</h2><h3 id="内容-（三级标题）"><a href="#内容-（三级标题）" class="headerlink" title="内容 （三级标题）"></a>内容 （三级标题）</h3><h4 id="内容-（四级标题）"><a href="#内容-（四级标题）" class="headerlink" title="内容 （四级标题）"></a>内容 （四级标题）</h4><h5 id="内容-（五级标题）"><a href="#内容-（五级标题）" class="headerlink" title="内容 （五级标题）"></a>内容 （五级标题）</h5><h6 id="内容-（六级标题）"><a href="#内容-（六级标题）" class="headerlink" title="内容 （六级标题）"></a>内容 （六级标题）</h6><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ 奈文摩尔</span><br><span class="line">+ 上古巨神</span><br><span class="line">* 恐怖利刃</span><br><span class="line">* 混沌骑士</span><br><span class="line">- 炼金术士</span><br><span class="line">- 痛苦女王 </span><br><span class="line"></span><br><span class="line">1. 代达罗斯之殇</span><br><span class="line">2. 阿托斯之棍</span><br><span class="line">3. 梅肯斯姆</span><br><span class="line"></span><br><span class="line">* Steam</span><br><span class="line">   * Dota2</span><br><span class="line">   * 绝地求生</span><br><span class="line">   * 中国式家长</span><br></pre></td></tr></table></figure><blockquote><p>效果如下</p></blockquote><ul><li>奈文摩尔</li><li>上古巨神</li></ul><ul><li>恐怖利刃</li><li>混沌骑士</li></ul><ul><li>炼金术士</li><li>痛苦女王 </li></ul><ol><li>代达罗斯之殇</li><li>阿托斯之棍</li><li>梅肯斯姆</li></ol><ul><li>Steam<ul><li>Dota2</li><li>绝地求生</li><li>中国式家长</li></ul></li></ul><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**加粗的文字**</span><br><span class="line">*倾斜的文字*`</span><br><span class="line">***斜体加粗的文字***</span><br><span class="line">~~加删除线的文字~~</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><p><strong>加粗的文字</strong><br><em>倾斜的文字</em>`<br><strong><em>斜体加粗的文字</em></strong><br><del>加删除线的文字</del></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;引用内容</span><br><span class="line">&gt;&gt;效果如下</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;可叠加的引用</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><blockquote><p>引用内容</p><blockquote><p>效果如下</p><blockquote><blockquote><blockquote><blockquote><p>可叠加的引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[github](https://github.com/calebman)</span><br><span class="line">[掘金](https://juejin.im/user/59bc7c00f265da0644289a4b)</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><p><a href="https://github.com/calebman" target="_blank" rel="noopener">github</a><br><a href="https://juejin.im/user/59bc7c00f265da0644289a4b" target="_blank" rel="noopener">掘金</a></p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><hr><hr><hr><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片介绍](http://chenjianhui.name/images/avatar.png)</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><p><img src="http://chenjianhui.name/images/avatar.png" alt="图片介绍"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">英雄|属性|大招</span><br><span class="line">--|:--:|--:</span><br><span class="line">奈文摩尔|敏捷|魂之挽歌</span><br><span class="line">受折磨的灵魂|智力|煤气罐</span><br><span class="line">混沌骑士|力量|混沌镜像</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><table><thead><tr><th>英雄</th><th style="text-align:center">属性</th><th style="text-align:right">大招</th></tr></thead><tbody><tr><td>奈文摩尔</td><td style="text-align:center">敏捷</td><td style="text-align:right">魂之挽歌</td></tr><tr><td>受折磨的灵魂</td><td style="text-align:center">智力</td><td style="text-align:right">煤气罐</td></tr><tr><td>混沌骑士</td><td style="text-align:center">力量</td><td style="text-align:right">混沌镜像</td></tr></tbody></table><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">  public static void main(String args[]) &#123;</span><br><span class="line">      System.out.println(&quot;Hello World&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      从掘金到Hexo，从未停止
    
    </summary>
    
      <category term="随笔" scheme="https://chenjianhui.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="markdown" scheme="https://chenjianhui.site/tags/markdown/"/>
    
      <category term="hexo" scheme="https://chenjianhui.site/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Netty构建Http容器</title>
    <link href="https://chenjianhui.site/2018-05-23-build-http-server-with-netty/"/>
    <id>https://chenjianhui.site/2018-05-23-build-http-server-with-netty/</id>
    <published>2018-05-23T07:35:58.000Z</published>
    <updated>2019-03-21T03:38:35.847Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2018-05-23-home-pic.jpg" alt><br><a id="more"></a></p><h3 id="要实现怎样的效果"><a href="#要实现怎样的效果" class="headerlink" title="要实现怎样的效果"></a>要实现怎样的效果</h3><blockquote><p>一个SpringBoot框架搭建起来的项目发布接口服务是这样的</p><p>SpringBoot搭建教程<strong><a href="/2018-02-21-build-springboot-env/">点击这里</a></strong></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/v1/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebResult <span class="title">search</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"获取指定产品接收产品id=&gt;%d"</span>, id);</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span> || <span class="string">""</span>.equals(id)) &#123;</span><br><span class="line">            logger.debug(<span class="string">"产品id不能为空"</span>);</span><br><span class="line">            <span class="keyword">return</span> WebResult.error(ERRORDetail.RC_0101001);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> WebResult.success(products.get(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我希望我使用Netty构建的Web服务器也能使用这样便捷的注解方式去发布我的接口服务</p></blockquote><h3 id="该怎么做"><a href="#该怎么做" class="headerlink" title="该怎么做"></a>该怎么做</h3><p><img src="https://resources.chenjianhui.site/2018-05-23-xmind-brain map" alt="系统流程"></p><ul><li>使用Netty自带的编解码、聚合器构建一个带有Http编解码功能的服务器这一点其实非常简单，Netty提供了对应的Http协议的编解码以及聚合器，我们只需要在管道初始化的时候加载它们。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPipelineInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//编解码处理器名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CODEC = <span class="string">"codec"</span>;</span><br><span class="line">    <span class="comment">//HTTP消息聚合处理器名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String AGGEGATOR = <span class="string">"aggegator"</span>;</span><br><span class="line">    <span class="comment">//HTTP消息压缩处理器名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String COMPRESSOR = <span class="string">"compressor"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = channel.pipeline();</span><br><span class="line">        pipeline.addLast(CODEC, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        pipeline.addLast(AGGEGATOR, <span class="keyword">new</span> HttpObjectAggregator(<span class="number">512</span> * <span class="number">1024</span>));</span><br><span class="line">        pipeline.addLast(COMPRESSOR,<span class="keyword">new</span> HttpContentCompressor());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> AllocHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现RequestMapping注解，用于标识处理器或者控制器对应匹配的接口地址。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提供启动入口，程序启动时创建Spring容器，并基于Spring初始化必要组件</li></ul><ol><li>提供程序入口类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CettyBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CettyBootstrap.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SPRING_XMLPATH = <span class="string">"classpath:applicantContext.xml"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_HTTP_SERVER_BEAN_NAME = <span class="string">"defaultHttpServer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        create(DEFAULT_SPRING_XMLPATH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String springXmlpath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(springXmlpath)) &#123;</span><br><span class="line">            springXmlpath = DEFAULT_SPRING_XMLPATH;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.debug(<span class="string">"spring框架配置文件地址为&#123;&#125;"</span>, springXmlpath);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(springXmlpath.split(<span class="string">"[,\\s]+"</span>));</span><br><span class="line">            context.start();</span><br><span class="line">            logger.debug(<span class="string">"spring框架启动成功"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                context.getBean(DEFAULT_HTTP_SERVER_BEAN_NAME, DefaultHttpServer.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                logger.warn(<span class="string">"未配置HttpServer，采用默认配置启动"</span>);</span><br><span class="line">                context.getAutowireCapableBeanFactory().createBean(DefaultHttpServer.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeansException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义默认实现的HttpServer组件，随Spring容器启动时加载基于Netty的Web容器，并使用HandlerMapping组件初始化HttpPipelineInitializer管道，其中HandlerMapping如果未有用户定义则使用默认的DefaultHandlerMapping实现</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultHttpServer</span> <span class="keyword">extends</span> <span class="title">ApplicationObjectSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DefaultHttpServer.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_HTTP_PORT = <span class="string">"8080"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HANDLER_MAPPING_BEAN_NAME = <span class="string">"handlerMapping"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HandlerMapping handlerMapping;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(String port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        beforeInit(applicationContext);</span><br><span class="line">        initHandlerMapping(applicationContext);</span><br><span class="line">        initServer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initHandlerMapping</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.handlerMapping = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handlerMapping = context.getAutowireCapableBeanFactory().createBean(DefaultHandlerMapping.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"初始化服务器"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!HttpUtils.isPort(port)) &#123;</span><br><span class="line">            logger.warn(<span class="string">"端口号不合法，使用默认端口&#123;&#125;"</span>, DEFAULT_HTTP_PORT);</span><br><span class="line">            port = DEFAULT_HTTP_PORT;</span><br><span class="line">        &#125;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .localAddress(<span class="keyword">new</span> InetSocketAddress(Integer.parseInt(port)))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> HttpPipelineInitializer(handlerMapping));</span><br><span class="line"></span><br><span class="line">            ChannelFuture f = b.bind().sync();</span><br><span class="line">            logger.info(<span class="string">"服务启动成功，监听&#123;&#125;端口"</span>, port);</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                workerGroup.shutdownGracefully().sync();</span><br><span class="line">                bossGroup.shutdownGracefully().sync();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeInit</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>提供默认的HandlerMapping实现类，负责匹配@RequestMapping注解下的处理函数</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultHandlerMapping</span> <span class="keyword">extends</span> <span class="title">ApplicationObjectSupport</span> <span class="keyword">implements</span> <span class="title">HandlerMapping</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(DefaultHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, HttpHandler&gt; httpHandlerMap = <span class="keyword">new</span> HashMap&lt;String, HttpHandler&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"初始化处理匹配器"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; handles = context.getBeansWithAnnotation(Controller.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : handles.entrySet()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"加载控制器&#123;&#125;"</span>, entry.getKey());</span><br><span class="line">                loadHttpHandler(entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadHttpHandler</span><span class="params">(Object value)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class clazz = value.getClass();</span><br><span class="line">        Object clazzFromInstance = clazz.newInstance();</span><br><span class="line">        Method[] method = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : method) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.isAnnotationPresent(RequestMapping.class)) &#123;</span><br><span class="line">                RequestMapping requestMapping = m.getAnnotation(RequestMapping.class);</span><br><span class="line">                <span class="keyword">for</span> (String url : requestMapping.value()) &#123;</span><br><span class="line">                    HttpHandler httpHandler = httpHandlerMap.get(url);</span><br><span class="line">                    <span class="keyword">if</span> (httpHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        logger.info(<span class="string">"加载url为&#123;&#125;的处理器&#123;&#125;"</span>, url, m.getName());</span><br><span class="line">                        httpHandlerMap.put(url, <span class="keyword">new</span> HttpHandler(clazzFromInstance, m));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        logger.warn(<span class="string">"url&#123;&#125;存在相同的处理器"</span>, url);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpHandler <span class="title">getHadnler</span><span class="params">(FullHttpRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> httpHandlerMap.get(request.uri());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当请求进入时通过HandlerMapping组件匹配处理器，如果匹配失败则返回404</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllocHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">FullHttpRequest</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HandlerMapping handlerMapping;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AllocHandler</span><span class="params">(HandlerMapping handlerMapping)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handlerMapping = handlerMapping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    异常处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sendError(ctx, HttpResponseStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, FullHttpRequest fullHttpRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpHandler httpHandler = handlerMapping.getHadnler(fullHttpRequest);</span><br><span class="line">        <span class="keyword">if</span> (httpHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object obj = httpHandler.execute(fullHttpRequest);</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                sendMessage(ctx, obj.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sendMessage(ctx, JSONObject.toJSONString(obj));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sendError(ctx, HttpResponseStatus.NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> </span>&#123;</span><br><span class="line">        FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.copiedBuffer(msg, CharsetUtil.UTF_8));</span><br><span class="line">        response.headers().set(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendError</span><span class="params">(ChannelHandlerContext ctx, HttpResponseStatus httpResponseStatus)</span> </span>&#123;</span><br><span class="line">        FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, httpResponseStatus, Unpooled.copiedBuffer(httpResponseStatus.toString(), CharsetUtil.UTF_8));</span><br><span class="line">        response.headers().set(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试与使用"><a href="#测试与使用" class="headerlink" title="测试与使用"></a>测试与使用</h3><ul><li>建立一个TestController</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHandler</span><span class="params">(FullHttpRequest fullHttpRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1234"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/zx"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">zx</span><span class="params">(FullHttpRequest fullHttpRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"zhuxiong"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/obj"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">obj</span><span class="params">(FullHttpRequest fullHttpRequest)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\n\n----------"</span>);</span><br><span class="line">        HttpHeaders httpHeaders = fullHttpRequest.headers();</span><br><span class="line">        Set&lt;String&gt; names = httpHeaders.names();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">" : "</span> + httpHeaders.get(name));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">        ByteBuf byteBuf = fullHttpRequest.content();</span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.capacity()];</span><br><span class="line">        byteBuf.readBytes(byteArray);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteArray));</span><br><span class="line">        System.out.println(<span class="string">"----------\n\n"</span>);</span><br><span class="line"></span><br><span class="line">        JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        json.put(<span class="string">"errCode"</span>, <span class="string">"00"</span>);</span><br><span class="line">        json.put(<span class="string">"errMsg"</span>, <span class="string">"0000000(成功)"</span>);</span><br><span class="line">        json.put(<span class="string">"data"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动Spring容器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CettyBootstrap.create();</span><br><span class="line">        <span class="comment">// CettyBootstrap.create("classpath:applicationContext.xml");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="未来要做的"><a href="#未来要做的" class="headerlink" title="未来要做的"></a>未来要做的</h3><ul><li style="list-style: none"><input type="checkbox" checked> 与Spring框架集成，将核心组件托管给Spring容器统一管理</li><li style="list-style: none"><input type="checkbox"> 提供静态资源映射</li><li style="list-style: none"><input type="checkbox"> 修改映射策略将请求映射至一个流程（一个处理器多个拦截器）</li><li style="list-style: none"><input type="checkbox"> 支持使用模板语法进行视图解析</li></ul>]]></content>
    
    <summary type="html">
    
      使用Netty构建一个SpringBoot风格的Web框架
    
    </summary>
    
      <category term="后端" scheme="https://chenjianhui.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Spring" scheme="https://chenjianhui.site/tags/Spring/"/>
    
      <category term="Netty" scheme="https://chenjianhui.site/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>纯正后端的vue轮子笔记</title>
    <link href="https://chenjianhui.site/2018-05-18-vue-notes/"/>
    <id>https://chenjianhui.site/2018-05-18-vue-notes/</id>
    <published>2018-05-18T06:10:22.000Z</published>
    <updated>2019-03-21T03:38:31.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2018-05-18-home-pic.png" alt></p><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于公司需要，<strong>我</strong>作为一个<strong>纯正的</strong>后端工程师，已经自学了半年多的vue了，愣是被逼成了一个小全栈，当然，小全栈这是往好听了说，事实上就是个前后端深度都不足的小菜鸡，在深知自己众多不足以及明白好记性不如<strong>烂</strong>笔头的道理下，多造轮子多做笔记总是不会错的：）</p><p>所以最近得空我把我刚学vuejs的时候写的<a href="https://github.com/calebman/vue-DBM" target="_blank" rel="noopener">烂工程</a>重构了一下，重构的时候针对性的分模块做了一些笔记如下</p><ul><li>路由</li><li>状态管理</li><li>权限管理</li><li>控件封装与使用</li><li>混入</li><li>数据模拟</li><li>打包优化与用户体验</li></ul><p>如果不想拉这么长可以去 <a href="https://github.com/calebman/vue-DBM#%E5%BC%80%E5%8F%91%E5%89%8D%E5%87%86%E5%A4%87" target="_blank" rel="noopener">全球最大的同性交友网站</a> 查看</p><h2 id="进入烂笔头模式"><a href="#进入烂笔头模式" class="headerlink" title="进入烂笔头模式"></a>进入烂笔头模式</h2><blockquote><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3></blockquote><h3 id="1-路由加载"><a href="#1-路由加载" class="headerlink" title="1. 路由加载"></a>1. 路由加载</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接加载页面</span></span><br><span class="line"><span class="keyword">import</span> page <span class="keyword">from</span> <span class="string">'@/views/page'</span>;</span><br><span class="line"><span class="comment">// 懒加载页面</span></span><br><span class="line">() =&gt; <span class="keyword">import</span>(<span class="string">'@/views/page'</span>);</span><br><span class="line"><span class="comment">// 指定打包名称的懒加载，可将多个页面打包成一个js进行加载</span></span><br><span class="line">() =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-page" */</span><span class="string">'@/views/page1'</span>);</span><br><span class="line">() =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-page" */</span><span class="string">'@/views/page2'</span>);</span><br><span class="line">() =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-page" */</span><span class="string">'@/views/page3'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-404路由"><a href="#2-404路由" class="headerlink" title="2. 404路由"></a>2. 404路由</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载一个404页面</span></span><br><span class="line"><span class="keyword">import</span> page404 <span class="keyword">from</span> <span class="string">'@/views/page404'</span>;</span><br><span class="line"><span class="comment">// 将以下路由配置放置在路由表的最末端，当路径无法匹配前面的所有路由时将会跳转至page404组件页面</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">component</span>: page404&#125;</span><br></pre></td></tr></table></figure><h3 id="3-路由拦截"><a href="#3-路由拦截" class="headerlink" title="3. 路由拦截"></a>3. 路由拦截</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由跳转前的拦截器</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 路由跳转后的拦截器</span></span><br><span class="line">router.afterEach(<span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 路由跳转时出现错误时的拦截器</span></span><br><span class="line">router.onError(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-动态路由"><a href="#4-动态路由" class="headerlink" title="4. 动态路由"></a>4. 动态路由</h3><blockquote><p>动态路由一般配合页面级的权限控制使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过router.addRoutes方法动态添加可访问路由</span></span><br><span class="line">router.addRoutes(addRouters)</span><br><span class="line"><span class="comment">// hack方法 确保addRoutes已完成</span></span><br><span class="line">next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;) <span class="comment">// set the replace: true so the navigation will not leave a history record</span></span><br></pre></td></tr></table></figure><h3 id="5-路由加载时动画"><a href="#5-路由加载时动画" class="headerlink" title="5. 路由加载时动画"></a>5. 路由加载时动画</h3><blockquote><p>路由加载时的loading动画一般配合路由懒加载使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在状态管理中定义一个路由loading标志</span></span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    routerLoading: <span class="literal">false</span>, <span class="comment">//路由的loading过渡</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">//修改路由loading状态</span></span><br><span class="line">    UPDATE_ROUTER_LOADING(state, status) &#123;</span><br><span class="line">      state.routerLoading = status</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在路由拦截器中修改loading状态</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  store.commit(<span class="string">'UPDATE_ROUTER_LOADING'</span>, <span class="literal">true</span>); <span class="comment">// 展示路由加载时动画</span></span><br><span class="line">&#125;);</span><br><span class="line">router.afterEach(<span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">  store.commit(<span class="string">'UPDATE_ROUTER_LOADING'</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.onError(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err); <span class="comment">// for bug</span></span><br><span class="line">  store.commit(<span class="string">'UPDATE_ROUTER_LOADING'</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在router-view定义loading动画</span></span><br><span class="line"><span class="comment">// element-ui提供了v-loading指令可以直接使用</span></span><br><span class="line">&lt;router-view v-loading=<span class="string">"$store.getters.routerLoading"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3></blockquote><h3 id="1-小知识"><a href="#1-小知识" class="headerlink" title="1. 小知识"></a>1. 小知识</h3><ul><li>state中的数据修改需要通过mutation或action触发</li><li>mutation中的方法必须是同步函数</li><li>action可包含任意异步操作，可返回一个Promise</li><li>mutation以及action可以重复，调用时将会依次调用，getter必须唯一</li></ul><h3 id="2-多模块"><a href="#2-多模块" class="headerlink" title="2. 多模块"></a>2. 多模块</h3><blockquote><p>业务比较复杂时可使用状态管理中的多模块，有以下注意事项</p></blockquote><ul><li>除state会根据组合时模块的别名来添加层级，其他的都是合并在根级下，所以在回调函数获取的getters、commit、dispatch都是全局作用的</li><li>mutation的回调参数只有state，state为当前模块的状态树，下同</li><li>action的回调参数为state、rootState、getters、commit、dispatch，如果需要在action中调用其他的action可使用dispatch直接调用</li><li>getter的回调参数为state、rootState、getters</li><li>模块间可以通过回调的rootState进行交互</li><li>出现重名的mutation、action将依次触发<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多模块的实现 app以及user为各个子模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">        app,</span><br><span class="line">        user</span><br><span class="line">    &#125;,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-辅助函数"><a href="#3-辅助函数" class="headerlink" title="3. 辅助函数"></a>3. 辅助函数</h3><blockquote><p>Vuex除了提供了Store对象以外还对外提供了一些辅助函数</p></blockquote><ul><li>mapState、mapGetters将store中的state、getters属性映射到vue组件局部的计算属性中</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: mapState([ </span><br><span class="line">    <span class="comment">// 映射 this.name 到 this.$store.state.name </span></span><br><span class="line">    <span class="string">'name'</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">// 映射 this.name 到 this.$store.getters.name </span></span><br><span class="line">    ...mapGetters([ <span class="string">'name'</span> ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mapActions、mapMutations将store中的dispatch、commit方法映射到vue组件局部的方法中</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">methods: &#123; </span><br><span class="line">    <span class="comment">// 映射 this.LoginByUsername() 到 this.$store.dispatch('LoginByUsername')</span></span><br><span class="line">    ...mapActions([ <span class="string">'LoginByUsername'</span> ]), </span><br><span class="line">    <span class="comment">// 映射 this.login() to this.$store.dispatch('LoginByUsername')</span></span><br><span class="line">    ...mapActions(&#123; <span class="attr">login</span>: <span class="string">'LoginByUsername'</span>&#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">methods: &#123; </span><br><span class="line">    <span class="comment">// 映射 this.SET_NAME() 到 this.$store.commit('SET_NAME') ])</span></span><br><span class="line">    ...mapMutations([ <span class="string">'SET_NAME'</span> ]) , </span><br><span class="line">    <span class="comment">// 映射 this.setName() 到 this.$store.commit('SET_NAME') &#125;)</span></span><br><span class="line">    ...mapMutations(&#123; <span class="attr">setName</span>: <span class="string">'SET_NAME'</span> ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-数据持久化插件"><a href="#4-数据持久化插件" class="headerlink" title="4. 数据持久化插件"></a>4. 数据持久化插件</h3><blockquote><p>刷新页面时希望状态不被丢失时可用此插件</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 摘抄于 https://github.com/robinvdvleuten/vuex-persistedstate</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">'vuex-persistedstate'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    createPersistedState(&#123;</span><br><span class="line">      storage: &#123;</span><br><span class="line">        getItem: key =* Cookies.get(key),</span><br><span class="line">        <span class="comment">// Please see https://github.com/js-cookie/js-cookie#json, on how to handle JSON.</span></span><br><span class="line">        setItem: (key, value) =* Cookies.set(key, value, &#123; <span class="attr">expires</span>: <span class="number">3</span>, <span class="attr">secure</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">        removeItem: key =* Cookies.remove(key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-日志插件"><a href="#5-日志插件" class="headerlink" title="5. 日志插件"></a>5. 日志插件</h3><blockquote><p>开发环境中希望能够跟踪状态变化并输出时可用此插件</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// createLogger是vuex中的内置插件</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vuexPlugins = [];</span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV !== <span class="string">'production'</span>)&#123; <span class="comment">// 开发环境加载该插件</span></span><br><span class="line">    vuexPlugins.push(createLogger); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: vuexPlugins</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3></blockquote><h3 id="1-需要实现的功能"><a href="#1-需要实现的功能" class="headerlink" title="1. 需要实现的功能"></a>1. 需要实现的功能</h3><ul><li>根据用户登录后的权限表生成路由</li><li>页面级的权限控制</li><li>dom元素级的权限控制</li><li>登录状态失效的处理</li></ul><h3 id="2-路由设计"><a href="#2-路由设计" class="headerlink" title="2. 路由设计"></a>2. 路由设计</h3><blockquote><p>首先我们需要设计路由对象需要有哪些必要参数信息</p><p>为了实现权限管理我们必须要有roles参数代表该路由必须拥有哪些权限才能访问</p><p>为了更好的展示路由在这里设计了title、icon两个参数用于侧边栏的菜单展示</p><p>而有些路由不需要在侧边栏展示，这里使用hidden参数来告诉程序哪些路由是不需要展示的</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先设计路由对象参数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* hidden: true                   如果hidden为true则在左侧菜单栏展示，默认为false</span></span><br><span class="line"><span class="comment">* name:'router-name'             路由名称，路由唯一标识</span></span><br><span class="line"><span class="comment">* meta : &#123;</span></span><br><span class="line"><span class="comment">    roles: ['admin','editor']    权限列表，用于页面级的权限控制，默认不设置代表任何权限均可访问</span></span><br><span class="line"><span class="comment">    title: 'title'               对应路由在左侧菜单栏的标题名称</span></span><br><span class="line"><span class="comment">    icon: 'icon-class'           对应路由在左侧菜单栏的图标样式</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来我们需要实现路由的动态加载</p><p>系统初始化时加载必要路由，之后根据登录用户的权限加载符合条件的路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义系统初始化时加载的必要路由信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRouterMap = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">name</span>: <span class="string">'login'</span>, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">"系统登录"</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;, <span class="attr">component</span>: login &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">"/404"</span>, <span class="attr">name</span>: <span class="string">"page404"</span>, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">"页面走丢了"</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;, <span class="attr">component</span>: page404 &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">"/401"</span>, <span class="attr">name</span>: <span class="string">"page401"</span>, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">"权限不足"</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;, <span class="attr">component</span>: page401 &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 定义布局页面</span></span><br><span class="line"><span class="keyword">const</span> layout = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-index" */</span> <span class="string">'@/views/layout'</span>);</span><br><span class="line"><span class="comment">// 定义异步加载的路由信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRouterMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'main'</span>,</span><br><span class="line">    redirect: <span class="string">'/dashboard'</span>,</span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">    component: layout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">'dashboard'</span>, <span class="attr">name</span>: <span class="string">'dashboard'</span>, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">"仪表盘"</span> &#125;, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-index" */</span><span class="string">'@/views/dashboard'</span>) &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/permission'</span>,</span><br><span class="line">    name: <span class="string">'permission'</span>,</span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">"权限页"</span>, <span class="attr">icon</span>: <span class="string">"dbm d-icon-quanxian"</span> &#125;,</span><br><span class="line">    redirect: <span class="string">'/permission/adminpermission'</span>,</span><br><span class="line">    component: layout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">"adminpermission"</span>, <span class="attr">name</span>: <span class="string">"adminPermission"</span>, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">"管理员权限页"</span>, <span class="attr">roles</span>: [<span class="string">"admin"</span>] &#125;, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/permission/admin'</span>) &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">"watcherpermission"</span>, <span class="attr">name</span>: <span class="string">"watcherPermission"</span>, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">"游客权限页"</span>, <span class="attr">roles</span>: [<span class="string">"admin"</span>, <span class="string">"watcher"</span>] &#125;, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/permission/watcher'</span>) &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">"elementpermission"</span>, <span class="attr">name</span>: <span class="string">"elementPermission"</span>, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">"元素级别权限"</span> &#125;, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/permission/element'</span>) &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">redirect</span>: <span class="string">'/404'</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-页面级的权限控制"><a href="#3-页面级的权限控制" class="headerlink" title="3. 页面级的权限控制"></a>3. 页面级的权限控制</h3><blockquote><p>使用路由拦截来实现页面级的权限控制</p><p>拦截路由跳转判断用户是否登录</p><p>从拉取的用户信息中提取权限表通过addRoutes方法动态加载异步路由表</p><p>每次路由跳转时判断用户是否拥有该路由的访问权限实现动态权限匹配</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义免登白名单</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'/login'</span>, <span class="string">'/404'</span>, <span class="string">'/401'</span>];</span><br><span class="line"><span class="comment">// 拦截路由跳转</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  store.commit(<span class="string">'UPDATE_ROUTER_LOADING'</span>, <span class="literal">true</span>); <span class="comment">// 展示路由加载时动画</span></span><br><span class="line">  <span class="keyword">if</span> (getToken()) &#123;  <span class="comment">// 存在token</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123; <span class="comment">// 判断当前用户是否已拉取完用户信息</span></span><br><span class="line">        store.dispatch(<span class="string">'GetUserInfo'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123; <span class="comment">// 拉取用户信息</span></span><br><span class="line">          <span class="keyword">const</span> roles = data.roles <span class="comment">// 权限表必须为数组,例如: ['admin','editer']</span></span><br><span class="line">          store.dispatch(<span class="string">'GenerateRoutes'</span>, &#123; roles &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">            router.addRoutes(store.getters.addRouters) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">            next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;) <span class="comment">// hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="comment">// 拉取用户信息失败，提示登录状态失效</span></span><br><span class="line">          store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            Message.error(<span class="string">'登录状态失效, 请重新登录'</span>);</span><br><span class="line">            next(&#123; <span class="attr">path</span>: <span class="string">'/login'</span> &#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasPermission(store.getters.roles, to.meta.roles)) &#123; <span class="comment">// 动态权限匹配</span></span><br><span class="line">          next();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next(&#123; <span class="attr">path</span>: <span class="string">'/401'</span>, <span class="attr">replace</span>: <span class="literal">true</span>, <span class="attr">query</span>: &#123; <span class="attr">noGoBack</span>: <span class="literal">true</span> &#125; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有token</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123; <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(<span class="string">'/login'</span>); <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-元素级的权限控制"><a href="#4-元素级的权限控制" class="headerlink" title="4. 元素级的权限控制"></a>4. 元素级的权限控制</h3><blockquote><p>使用自定义指令来实现元素级的权限控制</p><p>在被绑定元素插入父节点时验证用户是否包含该元素的所需权限</p><p>根据鉴权结果来决定是否移除该元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inserted(el, binding, vnode) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = binding; <span class="comment">// 获取自定义指令传入的鉴权信息</span></span><br><span class="line">    <span class="keyword">const</span> roles = store.getters &amp;&amp; store.getters.roles; <span class="comment">// 从状态管理中获取当前用户的路由信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value &amp;&amp; value <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> permissionRoles = value;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> hasPermission = roles.some(<span class="function"><span class="params">role</span> =&gt;</span> &#123; <span class="comment">// 判断用户是否包含该元素所需权限</span></span><br><span class="line">        <span class="keyword">return</span> permissionRoles.includes(role);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!hasPermission) &#123; <span class="comment">// 权限不足</span></span><br><span class="line">        el.parentNode &amp;&amp; el.parentNode.removeChild(el); <span class="comment">// 移除该dom元素</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`必须要有权限写入，例如['admin']`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在vue组件上使用它</span></span><br><span class="line"><span class="comment">// 引入并注册permission指令</span></span><br><span class="line"><span class="keyword">import</span> permission <span class="keyword">from</span> <span class="string">"@/directive/permission/index.js"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  directives: &#123;</span><br><span class="line">    permission</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用permission指令</span></span><br><span class="line">&lt;el-button v-permission=<span class="string">"['admin']"</span>&gt;admin 可见&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-button v-permission="['admin','watcher']"&gt;watcher 可见&lt;/</span>el-button&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h3></blockquote><h3 id="1-如何封装一个支持render渲染的组件"><a href="#1-如何封装一个支持render渲染的组件" class="headerlink" title="1. 如何封装一个支持render渲染的组件"></a>1. 如何封装一个支持render渲染的组件</h3><ul><li>首先创建一个函数式组件</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表格拓展函数式组件的实现</span></span><br><span class="line"><span class="comment">// see https://github.com/calebman/vue-DBM/blob/master/src/components/table/expand.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'TableExpand'</span>,</span><br><span class="line">  functional: <span class="literal">true</span>, <span class="comment">// 标记组件为 functional，这意味它是无状态 (没有响应式数据)，无实例 (没有 this 上下文)。</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    row: <span class="built_in">Object</span>, <span class="comment">// 当前行对象</span></span><br><span class="line">    field: <span class="built_in">String</span>, <span class="comment">// 列名称</span></span><br><span class="line">    index: <span class="built_in">Number</span>, <span class="comment">// 行号</span></span><br><span class="line">    render: <span class="built_in">Function</span> <span class="comment">// 渲染函数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function">(<span class="params">h, ctx</span>) =&gt;</span> &#123; <span class="comment">// 提供ctx作为上下文</span></span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">      row: ctx.props.row,</span><br><span class="line">      field: ctx.props.field,</span><br><span class="line">      index: ctx.props.index</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> ctx.props.render(h, params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>在父组件中引入</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// see https://github.com/calebman/vue-DBM/blob/master/src/components/table/table.vue</span></span><br><span class="line"><span class="keyword">import</span> expand <span class="keyword">from</span> <span class="string">"./expand.js"</span>;</span><br><span class="line"></span><br><span class="line">&lt;span v-<span class="keyword">if</span>=<span class="string">"typeof col.render ==='function'"</span>&gt;</span><br><span class="line">   &lt;expand :field=<span class="string">"col.field"</span> :row=<span class="string">"item"</span> :render=<span class="string">"col.render"</span> :index=<span class="string">"rowIndex"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">expand</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用render函数渲染</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// see https://github.com/calebman/vue-DBM/blob/master/src/views/demo/datatable/data-table.vue</span></span><br><span class="line"><span class="comment">// 引入自定义组件</span></span><br><span class="line"><span class="keyword">import</span> IndexColumn <span class="keyword">from</span> <span class="string">"@/components/business/index-column.vue"</span>;</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">components: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  IndexColumn</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// 获取当前组件的上下文</span></span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="comment">// 定义渲染函数</span></span><br><span class="line">render: <span class="function">(<span class="params">h, params</span>) =&gt;</span></span><br><span class="line">  h(<span class="string">"div"</span>, [</span><br><span class="line">    h(IndexColumn, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        field: params.field,</span><br><span class="line">        index: params.index,</span><br><span class="line">        pagingIndex:</span><br><span class="line">          (self.pagination.pageCurrent - <span class="number">1</span>) * self.pagination.pageSize</span><br><span class="line">      &#125;,</span><br><span class="line">      on: &#123; <span class="string">"on-value-delete"</span>: self.deleteRow &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br></pre></td></tr></table></figure><blockquote><h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3></blockquote><h3 id="1-小知识-1"><a href="#1-小知识-1" class="headerlink" title="1. 小知识"></a>1. 小知识</h3><ul><li>混入对象将享有被混入组件的生命周期</li><li>数据对象混入冲突时将以组件数据优先</li><li>对象选项（如methods、components、directives）混入冲突时取组件对象的键值对</li><li>同名钩子混合为数组，混入对象的钩子将在组件自身钩子之前调用</li></ul><h3 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2. 应用场景"></a>2. 应用场景</h3><ul><li>希望部分路由页面在离开时销毁但是不希望每个路由页面都定义局部路由时</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义混入对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  beforeRouteLeave(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.meta &amp;&amp; to.meta.destroy) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$destroy();</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混入需要此功能的组件页面</span></span><br><span class="line"><span class="keyword">import</span> routeLeaveDestoryMixin <span class="keyword">from</span> <span class="string">"routeleave-destory-mixin"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  mixins: [routeLeaveDestoryMixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据表格自定义了文本、数字、时间以及文件单元格组件，每个组件都有同样的数据修改、焦点选中等方法时，可提取为混入对象，提高组件复用性</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// see https://github.com/calebman/vue-DBM/blob/master/src/components/business/render-column-mixin.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义混入对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 是否选中此单元格</span></span><br><span class="line">    inSelect() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.cellClickData.index == <span class="keyword">this</span>.index &amp;&amp;</span><br><span class="line">        <span class="keyword">this</span>.cellClickData.field == <span class="keyword">this</span>.field) &#123;</span><br><span class="line">        <span class="keyword">this</span>.focus();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 获取焦点</span></span><br><span class="line">    focus() &#123;</span><br><span class="line">      <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (self.$refs[<span class="string">"rendercolumn"</span>]) &#123;</span><br><span class="line">          self.$refs[<span class="string">"rendercolumn"</span>].focus();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 失去焦点</span></span><br><span class="line">    blur() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.v != <span class="keyword">this</span>.value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">"on-value-change"</span>, <span class="keyword">this</span>.field, <span class="keyword">this</span>.index, <span class="keyword">this</span>.v);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"on-value-cancel"</span>, <span class="keyword">this</span>.field, <span class="keyword">this</span>.index);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数据修改</span></span><br><span class="line">    changeValue(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"on-value-change"</span>, <span class="keyword">this</span>.field, <span class="keyword">this</span>.index, val);</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"on-value-cancel"</span>, <span class="keyword">this</span>.field, <span class="keyword">this</span>.index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 监听父组件数据变化</span></span><br><span class="line">    value(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.v = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本列</span></span><br><span class="line"><span class="comment">// see https://github.com/calebman/vue-DBM/blob/master/src/components/business/text-column.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-show=<span class="string">"inSelect"</span> ref=<span class="string">"rendercolumn"</span> @blur=<span class="string">"blur"</span> @keyup=<span class="string">"enter($event)"</span> v-model=<span class="string">"v"</span> /&gt;</span><br><span class="line">    &lt;span v-show=<span class="string">"!inSelect"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cell-text"</span>&gt;&#123;&#123;v&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 时间列</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ see https:/</span><span class="regexp">/github.com/</span>calebman/vue-DBM/blob/master/src/components/business/datetime-column.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-date-picker v-show=<span class="string">"inSelect"</span> ref=<span class="string">"rendercolumn"</span> v-model=<span class="string">"v"</span> type=<span class="string">"datetime"</span> @change=<span class="string">"changeValue"</span> @blur=<span class="string">"blur"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"!inSelect"</span>&gt;</span>&#123;&#123;coverValue&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure><ul><li>希望降低组件的复杂度的时候可使用多个混入组件来分割核心组件的功能</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># see https://github.com/calebman/vue-DBM/tree/master/src/components/table</span></span><br><span class="line">├─table</span><br><span class="line">│      cell-edit-mixin.js                      <span class="comment"># 单元格编辑</span></span><br><span class="line">│      classes-mixin.js                        <span class="comment"># 表格样式                     </span></span><br><span class="line">│      scroll-bar-control-mixin.js             <span class="comment"># 表格滚动</span></span><br><span class="line">│      table-empty-mixin.js                    <span class="comment"># 无数据时的处理</span></span><br><span class="line">│      table-resize-mixin.js                   <span class="comment"># 表格的自适应</span></span><br><span class="line">│      table-row-mouse-events-mixin.js         <span class="comment"># 鼠标移动时的样式改变</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h3></blockquote><h3 id="1-需要实现的功能-1"><a href="#1-需要实现的功能-1" class="headerlink" title="1. 需要实现的功能"></a>1. 需要实现的功能</h3><ul><li>拦截Ajax请求并延时响应</li><li>返回的统一的数据格式</li><li>响应不同的模拟数据</li></ul><h3 id="2-配置Mockjs拦截Ajax请求"><a href="#2-配置Mockjs拦截Ajax请求" class="headerlink" title="2. 配置Mockjs拦截Ajax请求"></a>2. 配置Mockjs拦截Ajax请求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// see https://github.com/calebman/vue-DBM/blob/master/src/mock/index.js</span></span><br><span class="line"><span class="comment">// 引入Mockjs</span></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"><span class="comment">// 配置延时</span></span><br><span class="line">Mock.setup(&#123;</span><br><span class="line">  timeout: <span class="string">'300-1000'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 配置拦截</span></span><br><span class="line">Mock.mock(<span class="regexp">/\/user\/login/</span>, <span class="string">'post'</span>, loginAPI.loginByUsername);</span><br><span class="line">Mock.mock(<span class="regexp">/\/user\/logout/</span>, <span class="string">'post'</span>, loginAPI.logout);</span><br><span class="line">Mock.mock(<span class="regexp">/\/user\/info\.*/</span>, <span class="string">'get'</span>, loginAPI.getUserInfo);</span><br></pre></td></tr></table></figure><h3 id="3-响应的统一数据格式"><a href="#3-响应的统一数据格式" class="headerlink" title="3. 响应的统一数据格式"></a>3. 响应的统一数据格式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// see https://github.com/calebman/vue-DBM/blob/master/src/mock/response.js</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一响应工具类</span></span><br><span class="line"><span class="comment"> * 响应统一格式的数据</span></span><br><span class="line"><span class="comment"> * response : &#123;</span></span><br><span class="line"><span class="comment"> *    errCode: 00             响应结果码</span></span><br><span class="line"><span class="comment"> *    errMsg: 0000000（成功）  响应详细结果码</span></span><br><span class="line"><span class="comment"> *    data: null              具体数据</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 成功</span></span><br><span class="line">  success: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      errCode: <span class="string">'00'</span>,</span><br><span class="line">      errMsg: <span class="string">'0000000（成功）'</span>,</span><br><span class="line">      data: data ? data : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 失败</span></span><br><span class="line">  fail: <span class="function">(<span class="params">errCode, errMsg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      errCode: errCode ? errCode : <span class="string">'04'</span>,</span><br><span class="line">      errMsg: errMsg ? errMsg : <span class="string">'0401001（未知错误）'</span>,</span><br><span class="line">      data: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 权限不足</span></span><br><span class="line">  unauthorized: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      errCode: <span class="string">'43'</span>,</span><br><span class="line">      errMsg: <span class="string">'4300001（无权访问）'</span>,</span><br><span class="line">      data: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-配置响应逻辑"><a href="#4-配置响应逻辑" class="headerlink" title="4. 配置响应逻辑"></a>4. 配置响应逻辑</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// see https://github.com/calebman/vue-DBM/blob/master/src/mock/login.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; param2Obj &#125; <span class="keyword">from</span> <span class="string">'@/utils'</span>;</span><br><span class="line"><span class="keyword">import</span> Response <span class="keyword">from</span> <span class="string">'./response'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userMap = &#123;</span><br><span class="line">  admin: &#123;</span><br><span class="line">    password: <span class="string">'admin'</span>,</span><br><span class="line">    roles: [<span class="string">'admin'</span>],</span><br><span class="line">    token: <span class="string">'admin'</span>,</span><br><span class="line">    introduction: <span class="string">'我是超级管理员'</span>,</span><br><span class="line">    avatar: <span class="string">'https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif'</span>,</span><br><span class="line">    name: <span class="string">'Super Admin'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watcher: &#123;</span><br><span class="line">    password: <span class="string">'watcher'</span>,</span><br><span class="line">    roles: [<span class="string">'watcher'</span>],</span><br><span class="line">    token: <span class="string">'watcher'</span>,</span><br><span class="line">    introduction: <span class="string">'我是游客'</span>,</span><br><span class="line">    avatar: <span class="string">'https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif'</span>,</span><br><span class="line">    name: <span class="string">'Normal Watcher'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 使用用户名登录</span></span><br><span class="line">  loginByUsername: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = <span class="built_in">JSON</span>.parse(config.body);</span><br><span class="line">    <span class="keyword">if</span> (userMap[username] &amp;&amp; userMap[username].password === password) &#123;</span><br><span class="line">      <span class="keyword">return</span> Response.success(userMap[username]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Response.fail(<span class="string">"01"</span>, <span class="string">"0101001（用户名或密码错误）"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 拉取用户信息</span></span><br><span class="line">  getUserInfo: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; token &#125; = param2Obj(config.url);</span><br><span class="line">    <span class="keyword">if</span> (userMap[token]) &#123;</span><br><span class="line">      <span class="keyword">return</span> Response.success(userMap[token]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Response.fail();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 注销</span></span><br><span class="line">  logout: <span class="function"><span class="params">()</span> =&gt;</span> Response.success()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-模拟随机数据"><a href="#5-模拟随机数据" class="headerlink" title="5. 模拟随机数据"></a>5. 模拟随机数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// see https://github.com/nuysoft/Mock/wiki</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockStr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = Mock.mock(&#123; <span class="string">'str'</span>: <span class="string">'@name'</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> result.str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机数字</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockNumber</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="string">'num|'</span> + min + <span class="string">'-'</span> + max;</span><br><span class="line">    <span class="keyword">let</span> param = &#123;&#125;</span><br><span class="line">    param[key] = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(param).num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机小数，最高小数点后三位</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockDecimal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.Random.float(<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机数组一项</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">"image2.jpeg"</span>, <span class="string">"image3.jpeg"</span>, <span class="string">"image4.jpeg"</span>, <span class="string">"image5.jpeg"</span>, <span class="string">"image6.jpeg"</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockOneFileAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123; <span class="string">'oneFile|1'</span>: arr &#125;).oneFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机日期</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mockDateStr = Mock.Random.datetime(<span class="string">'yyyy-MM-dd HH:mm:ss'</span>);</span><br><span class="line">    <span class="comment">// 在这里使用了momentjs将其解析为Date类型</span></span><br><span class="line">    <span class="keyword">let</span> mockDate = moment(mockDateStr, <span class="string">'YYYY-MM-DD HH:mm:ss'</span>).toDate();</span><br><span class="line">    <span class="keyword">return</span> mockDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h3></blockquote><h3 id="1-做哪部分的优化"><a href="#1-做哪部分的优化" class="headerlink" title="1. 做哪部分的优化"></a>1. 做哪部分的优化</h3><ul><li>cdn优化</li><li>路由懒加载</li><li>其他优化</li><li>用户体验</li></ul><h3 id="2-cdn优化"><a href="#2-cdn优化" class="headerlink" title="2. cdn优化"></a>2. cdn优化</h3><blockquote><p>类似于vue、vue-router、moment、element-ui等提供了cdn的架或者工具类可在index.html中直接引入，然后配置webpack的externals使其不加入打包配置，从而减小app.js、vendor.js的体积</p></blockquote><ul><li>在index.html使用cdn引入依赖库</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网络请求工具类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/axios/0.18.0/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.5.16/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vue-router --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vuex --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- momentjs的中文包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.22.1/moment-with-locales.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- momentjs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.22.1/locale/zh-cn.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- element-ui样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/element-ui/2.3.6/theme-default/index.css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- element-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/element-ui/2.3.6/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置build文件夹下webpack.base.conf.js文件</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  externals: &#123;</span><br><span class="line">    <span class="string">'axios'</span>: <span class="string">'axios'</span>,</span><br><span class="line">    <span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">    <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">    <span class="string">'vuex'</span>: <span class="string">'Vuex'</span>,</span><br><span class="line">    <span class="string">'moment'</span>: <span class="string">'moment'</span>,</span><br><span class="line">    <span class="string">'element-ui'</span>: <span class="string">'ELEMENT'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-路由懒加载"><a href="#3-路由懒加载" class="headerlink" title="3. 路由懒加载"></a>3. 路由懒加载</h3><blockquote><p>路由懒加载能够将代码根据路由配置进行分割，加快首屏渲染的速度，在大型的单页应用中是必不可少的</p><p>参见<a href="https://github.com/calebman/vue-DBM/blob/master/docs/router.md" target="_blank" rel="noopener">路由管理</a>的实现</p></blockquote><h3 id="5-其他优化"><a href="#5-其他优化" class="headerlink" title="5. 其他优化"></a>5. 其他优化</h3><ul><li>尽量少的注册全局组件，使用UI框架可以参考文档做按需加载</li><li>可以和服务端配合采用gzip压缩，减少传输耗时</li><li>在更新不是很频繁的应用可考虑提高缓存时间</li><li>例如moment、lodash这种庞大的工具库在使用的功能不多的情况下可考虑寻找替代品</li></ul><h3 id="6-用户体验"><a href="#6-用户体验" class="headerlink" title="6. 用户体验"></a>6. 用户体验</h3><blockquote><p>一个单页应用到了一定规模不管怎么优化首屏渲染还是一个比较慢的过程，此时可以考虑在首屏渲染时使用一个加载动画告诉用户系统正在初始化</p></blockquote><ul><li>首先在index.html中定义一个渲染动画</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 首屏渲染时的加载动画 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"system-loading"</span> <span class="attr">class</span>=<span class="string">"showbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loader"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">"circular"</span> <span class="attr">viewBox</span>=<span class="string">"25 25 50 50"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">circle</span> <span class="attr">class</span>=<span class="string">"path"</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"20"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">stroke-miterlimit</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>系统初始化中...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后在App.vue组件的mounted钩子中移除这个loading</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(<span class="built_in">document</span>.getElementById(<span class="string">"system-loading"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      好记性不如烂笔头，多造轮子多做笔记
    
    </summary>
    
      <category term="前端" scheme="https://chenjianhui.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vuejs" scheme="https://chenjianhui.site/tags/vuejs/"/>
    
      <category term="vue-router" scheme="https://chenjianhui.site/tags/vue-router/"/>
    
      <category term="vuex" scheme="https://chenjianhui.site/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成环境搭建</title>
    <link href="https://chenjianhui.site/2018-02-21-build-springboot-env/"/>
    <id>https://chenjianhui.site/2018-02-21-build-springboot-env/</id>
    <published>2018-02-21T07:40:24.000Z</published>
    <updated>2019-03-21T03:38:27.303Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2018-02-21-home-pic.jpg" alt><br><a id="more"></a></p><h3 id="本文简介"><a href="#本文简介" class="headerlink" title="本文简介"></a>本文简介</h3><ul><li>为什么使用SpringBoot</li><li>搭建怎样一个环境</li><li>开发环境</li><li>导入快速启动项目</li><li>集成前准备</li><li>集成Mybatis</li><li>集成Swagger2</li><li>多环境配置</li><li>多环境下的日志配置</li><li>常用配置</li></ul><h3 id="为什么使用SpringBoot"><a href="#为什么使用SpringBoot" class="headerlink" title="为什么使用SpringBoot"></a>为什么使用SpringBoot</h3><p>&emsp;&emsp; SpringBoot相对于传统的SSM框架的优点是提供了默认的样板化配置，简化了Spring应用的初始搭建过程，如果你不想被众多的xml配置文件困扰，可以考虑使用SpringBoot替代</p><h3 id="搭建怎样一个环境"><a href="#搭建怎样一个环境" class="headerlink" title="搭建怎样一个环境"></a>搭建怎样一个环境</h3><p>&emsp;&emsp; 本文将基于Spring官方提供的快速启动项目模板集成Mybatis、Swagger2框架，并讲解mybatis generator一键生成代码插件、logback、一键生成文档以及多环境的配置方法，最后再介绍一下自定义配置的注解获取、全局异常处理等经常用到的东西。</p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>&emsp;&emsp; 本人使用IDEA作为开发工具，IDEA下载时默认集成了SpringBoot的快速启动项目可以直接创建，如果使用Eclipse的同学可以考虑安装SpringBoot插件或者直接从<a href="https://start.spring.io/" target="_blank" rel="noopener">这里</a>配置并下载SpringBoot快速启动项目，需要注意的是本次环境搭建选择的是SpringBoot2.0的快速启动框架，SpringBoot2.0要求jdk版本必须要在1.8及以上。</p><h3 id="导入快速启动项目"><a href="#导入快速启动项目" class="headerlink" title="导入快速启动项目"></a>导入快速启动项目</h3><p>&emsp;&emsp; 不管是由IDEA导入还是现实下载模板工程都需要初始化快速启动工程的配置，如果使用IDEA，在新建项目时选择Spring Initializr，主要配置如下图<br><img src="https://resources.chenjianhui.site/2018-02-21-idea-new-module.jpg" alt="IDEA新建SpringBoot项目-填写项目/包名"><br><img src="http://upload-images.jianshu.io/upload_images/10936059-4fc8bad8fe8d75be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDEA新建SpringBoot项目-选择依赖包"><br>&emsp;&emsp; 点击next之后finish之后IDEA显示正在下载模板工程，下载完成后会根据pom.xml下载包依赖，依赖下载完毕后模板项目就算创建成功了，如果是直接从官方网站配置下载快速启动项目可参考下图配置<br><img src="https://resources.chenjianhui.site/2018-02-21-idea-selected-dependencies.jpg" alt="直接下载SpringBoot快速启动项目-项目配置"><br>&emsp;&emsp; 从Search for dependencies 框中输入并选择Web、Mysql、Mybatis加入依赖，点击Generate Project下载快速启动项目，然后在IDE中选择导入Maven项目，项目导入完成后可见其目录结构如下图<br><img src="https://resources.chenjianhui.site/2018-02-21-spring-boot-module-structure.jpg" alt="快速启动项目-项目结构"><br>&emsp;&emsp; 需要关注红色方框圈起来的部分，由上往下第一个java类是用来启动项目的入口函数，第二个properties后缀的文件是项目的配置文件，第三个是项目的依赖包以及执行插件的配置</p><h3 id="集成前准备"><a href="#集成前准备" class="headerlink" title="集成前准备"></a>集成前准备</h3><h4 id="修改-properties为-yml"><a href="#修改-properties为-yml" class="headerlink" title="修改.properties为.yml"></a>修改.properties为.yml</h4><p>&emsp;&emsp; yml相对于properties更加精简而且很多官方给出的Demo都是yml的配置形式，在这里我们采用yml的形式代替properties，相对于properties形式主要有以下两点不同</p><blockquote><ol><li>对于键的描述由原有的 “.” 分割变成了树的形状</li><li>对于所有的键的后面一个要跟一个空格，不然启动项目会报配置解析错误</li></ol></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># properties式语法描述</span></span><br><span class="line"><span class="string">spring.datasource.name</span> <span class="string">=</span> <span class="string">mysql</span></span><br><span class="line"><span class="string">spring.datasource.url</span> <span class="string">=</span> <span class="attr">jdbc:mysql://localhost:3306/db?characterEncoding=utf-8</span></span><br><span class="line"><span class="string">spring.datasource.username</span> <span class="string">=</span> <span class="string">root</span></span><br><span class="line"><span class="string">spring.datasource.password</span> <span class="string">=</span> <span class="number">123</span></span><br><span class="line"><span class="comment"># yml式语法描述</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    datasource:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://localhost:3306/db?characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="配置所需依赖"><a href="#配置所需依赖" class="headerlink" title="配置所需依赖"></a>配置所需依赖</h4><p>&emsp;&emsp; 快速启动项目创建成功后我们观察其pom.xml文件中的依赖如下图，包含了我们选择的Web、Mybatis以及Mysql<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring web mvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp; 但是我们使用ORM框架一般还会配合数据库连接池以及分页插件来使用，在这里我选择了阿里的druid以及pagehelper这个分页插件，再加上我们还需要整合swagger2文档自动化构建框架，所以增加了以下四个依赖项<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- alibaba的druid数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- alibaba的json格式化对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动生成API文档 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="集成Mybatis"><a href="#集成Mybatis" class="headerlink" title="集成Mybatis"></a>集成Mybatis</h3><p>&emsp;&emsp; Mybatis的配置主要包括了druid数据库连接池、pagehelper分页插件、mybatis-generator代码逆向生成插件以及mapper、pojo扫描配置</p><h4 id="配置druid数据库连接池"><a href="#配置druid数据库连接池" class="headerlink" title="配置druid数据库连接池"></a>配置druid数据库连接池</h4><p>&emsp;&emsp; 添加以下配置至application.yml文件中<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    datasource:</span></span><br><span class="line">        <span class="comment"># 如果存在多个数据源，监控的时候可以通过名字来区分开来</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="comment"># 连接数据库的url</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://localhost:3306/db?characterEncoding=utf-8</span></span><br><span class="line">        <span class="comment"># 连接数据库的账号</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">root</span></span><br><span class="line">        <span class="comment">#  连接数据库的密码</span></span><br><span class="line"><span class="attr">        password:</span> <span class="number">123</span></span><br><span class="line">        <span class="comment"># 使用druid数据源</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="comment"># 扩展插件</span></span><br><span class="line">        <span class="comment"># 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall</span></span><br><span class="line"><span class="attr">        filters:</span> <span class="string">stat</span></span><br><span class="line">        <span class="comment"># 最大连接池数量</span></span><br><span class="line"><span class="attr">        maxActive:</span> <span class="number">20</span></span><br><span class="line">        <span class="comment"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span></span><br><span class="line"><span class="attr">        initialSize:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># 获取连接时最大等待时间，单位毫秒</span></span><br><span class="line"><span class="attr">        maxWait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment"># 最小连接池数量</span></span><br><span class="line"><span class="attr">        minIdle:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment"># 连接保持空闲而不被驱逐的最长时间</span></span><br><span class="line"><span class="attr">        minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="comment"># 用来检测连接是否有效的sql，要求是一个查询语句</span></span><br><span class="line">        <span class="comment"># 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用</span></span><br><span class="line"><span class="attr">        validationQuery:</span> <span class="string">select</span> <span class="string">count(1)</span> <span class="string">from</span> <span class="string">'table'</span></span><br><span class="line">        <span class="comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效</span></span><br><span class="line"><span class="attr">        testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line"><span class="attr">        testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line"><span class="attr">        testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 是否缓存preparedStatement，即PSCache</span></span><br><span class="line"><span class="attr">        poolPreparedStatements:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true</span></span><br><span class="line"><span class="attr">        maxOpenPreparedStatements:</span> <span class="bullet">-1</span></span><br></pre></td></tr></table></figure></p><h4 id="配置pagehelper分页插件"><a href="#配置pagehelper分页插件" class="headerlink" title="配置pagehelper分页插件"></a>配置pagehelper分页插件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pagehelper分页插件</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">    <span class="comment"># 数据库的方言</span></span><br><span class="line"><span class="attr">    helperDialect:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="comment"># 启用合理化，如果pageNum &lt; 1会查询第一页，如果pageNum &gt; pages会查询最后一页</span></span><br><span class="line"><span class="attr">    reasonable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="代码逆向生成插件mybatis-generator的配置及运行"><a href="#代码逆向生成插件mybatis-generator的配置及运行" class="headerlink" title="代码逆向生成插件mybatis-generator的配置及运行"></a>代码逆向生成插件mybatis-generator的配置及运行</h4><p>&emsp;&emsp; mybatis-generator插件的使用主要分为以下三步</p><blockquote><ol><li>pom.xml中添加mybatis-generator插件</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将Spring Boot应用打包为可执行的jar或war文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 扫描resources/generator目录下的generatorConfig.xml配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    $&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml</span><br><span class="line">                <span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.创建逆向代码生成配置文件generatorConfig.xml</p></blockquote><p>&emsp;&emsp; 参照pom.xml插件配置中的扫描位置，在resources目录下创建generator文件夹，在新建的文件夹中创建generatorConfig.xml配置文件，文件的详细配置信息如下<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 运行方式:mvaen运行命令 mybatis-generator:generate -e --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"generator/generator.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"$&#123;classPathEntry&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span></span></span><br><span class="line"><span class="tag">                <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/$&#123;db&#125;?characterEncoding=utf-8"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">userId</span>=<span class="string">"$&#123;userId&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">password</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;pojoTargetPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;mapperTargetPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;daoTargetPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 schema是数据库名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"%"</span> <span class="attr">schema</span>=<span class="string">"$&#123;db&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp; 为了将generatorConfig.xml配置模板化，在这里将变动性较大的配置项单独提取出来作为一个generatorConfig.xml的配置文件，然后通过properties标签读取此文件的配置，这样做的好处是当需要多处复用此xml时只需要关注少量的配置项。<br>&emsp;&emsp; 在generatorConfig.xml同级创建generator.properties文件，现只需要配置generator.properties文件即可，配置内容如下<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请手动配置以下选项</span></span><br><span class="line"><span class="comment"># 数据库驱动:选择你的本地硬盘上面的数据库驱动包</span></span><br><span class="line"><span class="string">classPathEntry</span> <span class="string">=</span> <span class="attr">D:/CJH/maven-repository/mysql/mysql-connector-java/5.1.30/mysql-connector-java-5.1.30.jar</span></span><br><span class="line"><span class="comment"># 数据库名称、用户名、密码</span></span><br><span class="line"><span class="string">db</span> <span class="string">=</span> <span class="string">db</span></span><br><span class="line"><span class="string">userId</span> <span class="string">=</span> <span class="string">root</span></span><br><span class="line"><span class="string">password</span> <span class="string">=</span> <span class="number">123</span></span><br><span class="line"><span class="comment"># 生成pojo的包名位置 在src/main/java目录下</span></span><br><span class="line"><span class="string">pojoTargetPackage</span> <span class="string">=</span> <span class="string">com.spring.demo.springbootexample.mybatis.po</span></span><br><span class="line"><span class="comment"># 生成DAO的包名位置 在src/main/java目录下</span></span><br><span class="line"><span class="string">daoTargetPackage</span> <span class="string">=</span> <span class="string">com.spring.demo.springbootexample.mybatis.mapper</span></span><br><span class="line"><span class="comment"># 生成Mapper的包名位置 位于src/main/resources目录下</span></span><br><span class="line"><span class="string">mapperTargetPackage</span> <span class="string">=</span> <span class="string">mapper</span></span><br></pre></td></tr></table></figure></p><blockquote><ol start="3"><li>运行mybatis-generator插件生成Dao、Model、Mapping</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开命令行cd到项目pom.xml同级目录运行以下命令</span></span><br><span class="line">mvn mybatis-generator:generate -e</span><br></pre></td></tr></table></figure><h5 id="mybatis扫描包配置"><a href="#mybatis扫描包配置" class="headerlink" title="mybatis扫描包配置"></a>mybatis扫描包配置</h5><p>&emsp;&emsp; 至此已经生成了指定数据库对应的实体、映射类，但是还不能直接使用，需要配置mybatis扫描地址后才能正常调用</p><blockquote><ol><li>在application.yml配置mapper.xml以及pojo的包地址</li></ol></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">    <span class="comment"># mapper.xml包地址</span></span><br><span class="line"><span class="attr">    mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br><span class="line">    <span class="comment"># pojo生成包地址</span></span><br><span class="line"><span class="attr">    type-aliases-package:</span> <span class="string">com.spring.demo.springbootexample.mybatis.po</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>在SpringBootExampleApplication.java中开启Mapper扫描注解</li></ol></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.spring.demo.springbootexample.mybatis.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootExampleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringBootExampleApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试mapper的有效性"><a href="#测试mapper的有效性" class="headerlink" title="测试mapper的有效性"></a>测试mapper的有效性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//替换成自己生成的mapper</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询该表的所有数据</span></span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByExample(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 启动SpringBootExampleApplication.java的main函数，如果没有在application.yml特意配置server.port那么springboot会采用默认的8080端口运行，运行成功将打印如下日志<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Tomcat started on port(s): 8080 (http) with context path <span class="string">''</span></span><br></pre></td></tr></table></figure></p><p>在浏览器输入地址如果返回表格的中的所有数据代表mybatis集成成功<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><h3 id="集成Swagger2"><a href="#集成Swagger2" class="headerlink" title="集成Swagger2"></a>集成Swagger2</h3><p>&emsp;&emsp; Swagger2是一个文档快速构建工具，能够通过注解自动生成一个Restful风格json形式的接口文档，并可以通过如swagger-ui等工具生成html网页形式的接口文档，swagger2的集成比较简单，使用需要稍微熟悉一下，集成、注解与使用分如下四步</p><blockquote><ol><li>建立SwaggerConfig文件</li></ol></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// 接口版本号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String version = <span class="string">"1.0"</span>;</span><br><span class="line"><span class="comment">// 接口大标题</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String title = <span class="string">"SpringBoot示例工程"</span>;</span><br><span class="line"><span class="comment">// 具体的描述</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String description = <span class="string">"API文档自动生成示例"</span>;</span><br><span class="line"><span class="comment">// 服务说明url</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String termsOfServiceUrl = <span class="string">"http://www.kingeid.com"</span>;</span><br><span class="line"><span class="comment">// licence</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String license = <span class="string">"MIT"</span>;</span><br><span class="line"><span class="comment">// licnce url</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String licenseUrl = <span class="string">"https://mit-license.org/"</span>;</span><br><span class="line"><span class="comment">// 接口作者联系方式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Contact contact = <span class="keyword">new</span> Contact(<span class="string">"calebman"</span>, <span class="string">"https://github.com/calebman"</span>, <span class="string">"chenjianhui0428@gmail.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">buildDocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(buildApiInf())</span><br><span class="line">.select().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">buildApiInf</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(title).termsOfServiceUrl(termsOfServiceUrl).description(description)</span><br><span class="line">.version(version).license(license).licenseUrl(licenseUrl).contact(contact).build();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>在SpringBootExampleApplication.java中启用Swagger2注解</li></ol></blockquote><p>&emsp;&emsp; 在@SpringBootApplication注解下面加上@EnableSwagger2注解</p><blockquote><ol start="3"><li>常用注解示例</li></ol></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Contorller中的注解示例</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/v1/product"</span>)</span><br><span class="line"><span class="comment">// 表示标识这个类是swagger的资源 </span></span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"DocController"</span>, tags = &#123;<span class="string">"restful api示例"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//表示一个http请求的操作</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"修改指定产品"</span>, httpMethod = <span class="string">"PUT"</span>, produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="comment">//@ApiImplicitParams用于方法，包含多个@ApiImplicitParam表示单独的请求参数 </span></span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;<span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"产品ID"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"path"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebResult <span class="title">update</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id, @ModelAttribute Product product) </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"修改指定产品接收产品id与产品信息=&gt;%d,&#123;&#125;"</span>, id, product);</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span> || <span class="string">""</span>.equals(id)) &#123;</span><br><span class="line">            logger.debug(<span class="string">"产品id不能为空"</span>);</span><br><span class="line">            <span class="keyword">return</span> WebResult.error(ERRORDetail.RC_0101001);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> WebResult.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Model中的注解示例</span></span><br><span class="line"><span class="comment">//表示对类进行说明，用于参数用实体类接收 </span></span><br><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"产品信息"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="comment">//表示对model属性的说明或者数据操作更改 </span></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(required = <span class="keyword">true</span>, name = <span class="string">"name"</span>, value = <span class="string">"产品名称"</span>, dataType = <span class="string">"query"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@ApiModelProperty</span>(name = <span class="string">"type"</span>, value = <span class="string">"产品类型"</span>, dataType = <span class="string">"query"</span>)</span><br><span class="line"><span class="keyword">private</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>生成json形式的文档</li></ol></blockquote><p>&emsp;&emsp; 集成成功后启动项目控制台会打印级别为INFO的日志，截取部分如下，表明可通过访问应用的v2/api-docs接口得到文档api的json格式数据，可在浏览器输入指定地址验证集成是否成功<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mapped &quot;&#123;[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]&#125;&quot; </span><br><span class="line">http://localhost:8080/v2/api-docs</span><br></pre></td></tr></table></figure></p><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p>&emsp;&emsp; 应用研发过程中多环境是不可避免的，假设我们现在有开发、演示、生产三个不同的环境其配置也不同，如果每次都在打包环节来进行配置难免出错，SpringBoot支持通过命令启动不同的环境，但是配置文件需要满足application-{profile}.properties的格式，profile代表对应环境的标识，加载时可通过不同命令加载不同环境。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">application-dev.properties：开发环境</span><br><span class="line">application-test.properties：演示环境</span><br><span class="line">application-prod.properties：生产环境</span><br><span class="line"><span class="comment"># 运行演示环境命令</span></span><br><span class="line">java -jar spring-boot-example-0.0.1-SNAPSHOT --spring.profiles.active=<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp; 基于现在的项目实现多环境我们需要在application.yml同级目录新建application-dev.yml、application-test.yml、application-prod.yml三个不同环境的配置文件，将不变的公有配置如druid的大部分、pagehelper分页插件以及mybatis包扫描配置放置于application.yml中，并在application.yml中配置默认采用开发环境，那么如果不带–spring.profiles.active启动应用就默认为开发环境启动，变动较大的配置如数据库的账号密码分别写入不同环境的配置文件中<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    profiles:</span></span><br><span class="line">      <span class="comment"># 默认使用开发环境</span></span><br><span class="line"><span class="attr">      active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp; 配置到这里我们的项目目录结构如下图所示<br><img src="https://resources.chenjianhui.site/2018-02-21-spring-boot-module-src-config.jpg" alt="src/main/java目录结构"><br><img src="https://resources.chenjianhui.site/2018-02-21-spring-boot-module-resources-config.jpg" alt="src/main/resources目录结构"></p><p>&emsp;&emsp; 至此我们分别完成了Mybatis、Swagger2以及多环境的集成，接下来我们配置多环境下的logger。对于logger我们总是希望在项目研发过程中越多越好，能够给予足够的信息定位bug，项目处于演示或者上线状态时为了不让日志打印影响程序性能我们只需要警告或者错误的日志，并且需要写入文件，那么接下来就基于logback实现多环境下的日志配置</p><h3 id="多环境下的日志配置"><a href="#多环境下的日志配置" class="headerlink" title="多环境下的日志配置"></a>多环境下的日志配置</h3><p>&emsp;&emsp; 创建logback-spring.xml在application.yml的同级目录，springboot推荐使用logback-spring.xml而不是logback.xml文件，logback-spring.xml的配置内容如下所示<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        简要描述</span></span><br><span class="line"><span class="comment">        日志格式 =&gt; %d&#123;HH:mm:ss.SSS&#125;(时间) [%-5level](日志级别) %logger&#123;36&#125;(logger名字最长36个字符，否则按照句点分割) - %msg%n(具体日志信息并且换行)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        开发环境 =&gt; $&#123;basepackage&#125;包下控制台打印DEBUG级别及以上、其他包控制台打印INFO级别及以上</span></span><br><span class="line"><span class="comment">        演示（测试）环境 =&gt; $&#123;basepackage&#125;包下控制台打印INFO级别及以上、其他包控制台以及文件打印WARN级别及以上</span></span><br><span class="line"><span class="comment">        生产环境 =&gt; 控制台以及文件打印ERROR级别及以上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        日志文件生成规则如下：</span></span><br><span class="line"><span class="comment">        文件生成目录 =&gt; $&#123;logdir&#125;</span></span><br><span class="line"><span class="comment">        当日的log文件名称 =&gt; $&#123;appname&#125;.log</span></span><br><span class="line"><span class="comment">        其他时候的log文件名称 =&gt; $&#123;appname&#125;.%d&#123;yyyy-MM-dd&#125;.log</span></span><br><span class="line"><span class="comment">        日志文件最大 =&gt; $&#123;maxsize&#125;</span></span><br><span class="line"><span class="comment">        最多保留 =&gt; $&#123;maxdays&#125;天</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义参数 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxsize"</span> <span class="attr">value</span>=<span class="string">"30MB"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只保留最近90天的日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxdays"</span> <span class="attr">value</span>=<span class="string">"90"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--application.yml 传递参数 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--log文件生成目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"logdir"</span> <span class="attr">source</span>=<span class="string">"resources.logdir"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"appname"</span> <span class="attr">source</span>=<span class="string">"resources.appname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目基础包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"basepackage"</span> <span class="attr">source</span>=<span class="string">"resources.basepackage"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台 ConsoleAppender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--展示格式 layout--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%-5level] %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到文件 FileAppender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则</span></span><br><span class="line"><span class="comment">            如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天</span></span><br><span class="line"><span class="comment">            的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;logdir&#125;/$&#123;appname&#125;.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;logdir&#125;/$&#123;appname&#125;.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;maxdays&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>$&#123;maxsize&#125;<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志输出编码格式化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%-5level] %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleLog"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            additivity是子Logger 是否继承 父Logger 的 输出源（appender） 的标志位</span></span><br><span class="line"><span class="comment">            在这里additivity配置为false代表如果$&#123;basepackage&#125;中有INFO级别日志则子looger打印 root不打印</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"$&#123;basepackage&#125;"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleLog"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 演示（测试）环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"WARN"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleLog"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"fileLog"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"$&#123;basepackage&#125;"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleLog"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"fileLog"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleLog"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"fileLog"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp; 日志配置中引用了application.yml的配置信息，主要有logdir、appname、basepackage三项，logdir是日志文件的写入地址，可以传入相对路径，appname是应用名称，引入这项是为了通过日志文件名称区分是哪个应该输出的，basepackage是包过滤配置，比如开发环境中需要打印debug级别以上的日志，但是又想使除我写的logger之外的DEBUG不打印，可过滤到本项目的包名才用DEBUG打印，此外包名使用INFO级别打印，在application.yml中新建这三项配置，也可在不同环境配置不同属性<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#应用配置</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">    <span class="comment"># log文件写入地址</span></span><br><span class="line"><span class="attr">    logdir:</span> <span class="string">logs/</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">    appname:</span> <span class="string">spring-boot-example</span></span><br><span class="line">    <span class="comment"># 日志打印的基础扫描包</span></span><br><span class="line"><span class="attr">    basepackage:</span> <span class="string">com.spring.demo.springbootexample</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp; 使用不同环境启动测试logger配置是否生效，在开发环境下将打印DEBUG级别以上的四条logger记录，在演示环境下降打印INFO级别以上的三条记录并写入文件，在生产环境下只打印ERROR级别以上的一条记录并写入文件<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/logger"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebResult <span class="title">logger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.trace(<span class="string">"日志输出 &#123;&#125;"</span>, <span class="string">"trace"</span>);</span><br><span class="line">    logger.debug(<span class="string">"日志输出 &#123;&#125;"</span>, <span class="string">"debug"</span>);</span><br><span class="line">    logger.info(<span class="string">"日志输出 &#123;&#125;"</span>, <span class="string">"info"</span>);</span><br><span class="line">    logger.warn(<span class="string">"日志输出 &#123;&#125;"</span>, <span class="string">"warn"</span>);</span><br><span class="line">    logger.error(<span class="string">"日志输出 &#123;&#125;"</span>, <span class="string">"error"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"00"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><h4 id="加载自定义配置"><a href="#加载自定义配置" class="headerlink" title="加载自定义配置"></a>加载自定义配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:application.yml"</span>&#125;, encoding = <span class="string">"utf-8"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;resources.midpHost&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String midpHost;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMidpHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> midpHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(GlobalExceptionResolver.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebResult <span class="title">exceptionHandle</span><span class="params">(HttpServletRequest req, Exception ex)</span> </span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        logger.error(<span class="string">"未知异常"</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> WebResult.error(ERRORDetail.RC_0401001);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例工程开源地址"><a href="#示例工程开源地址" class="headerlink" title="示例工程开源地址"></a>示例工程开源地址</h3><p><a href="https://github.com/calebman/spring-boot-example" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      一个高可复用的SpringBoot基础框架
    
    </summary>
    
      <category term="后端" scheme="https://chenjianhui.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="SpringBoot" scheme="https://chenjianhui.site/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://chenjianhui.site/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>vue封装echarts组件</title>
    <link href="https://chenjianhui.site/2017-09-30-vue-echarts/"/>
    <id>https://chenjianhui.site/2017-09-30-vue-echarts/</id>
    <published>2017-09-30T03:11:52.000Z</published>
    <updated>2019-03-21T03:38:23.311Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2017-09-30-home-pic.png" alt></p><a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><hr><p>做项目的时候为了让数据展示的更加直观，总会用到图表相关的控件，而说到图表控件第一时间当然想到<a href="http://echarts.baidu.com/examples.html" target="_blank" rel="noopener">ECharts</a>这个开源项目，而它不像iview、element-ui这些组件使用起来那么便捷，需要绕一个小弯，为了图方便于是对ECharts进行了一层封装</p><h2 id="控件演示"><a href="#控件演示" class="headerlink" title="控件演示"></a>控件演示</h2><p><img src="https://resources.chenjianhui.site/2017-09-30-effect.gif" alt></p><h2 id="控件使用"><a href="#控件使用" class="headerlink" title="控件使用"></a>控件使用</h2><hr><h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><ul><li>基于echarts的二次封装</li><li>由数据驱动</li><li>控件源码见src/components/charts</li></ul><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><ul><li>props</li></ul><table><thead><tr><th>属性</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>_id</td><td>图表唯一标识，当id重复将会报错</td><td>String</td></tr><tr><td>_titleText</td><td>图表标题</td><td>String</td></tr><tr><td>_xText</td><td>x轴描述</td><td>String</td></tr><tr><td>_yText</td><td>y轴描述</td><td>String</td></tr><tr><td>_chartData</td><td>图表数据</td><td>Array</td></tr><tr><td>_type</td><td>图表类型，提供三种(LineAndBar/LineOrBar/Pie)</td><td>String</td></tr></tbody></table><ul><li>调用示例</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;chart</span><br><span class="line"> :_id=<span class="string">"'testCharts'"</span></span><br><span class="line"> :_titleText=<span class="string">"'访问量统计'"</span></span><br><span class="line"> :_xText=<span class="string">"'类别'"</span></span><br><span class="line"> :_yText=<span class="string">"'总访问量'"</span></span><br><span class="line"> :_chartData=<span class="string">"chartData"</span></span><br><span class="line"> :_type=<span class="string">"'Pie'"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">chart</span>&gt;</span></span></span><br><span class="line"><span class="comment">//测试数据样例 [["类别1",10],["类别2",20]]</span></span><br></pre></td></tr></table></figure><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><hr><ul><li><p>创建一个待渲染的dom</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :id=<span class="string">"_id"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"chart"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绘制函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawPie</span>(<span class="params">chartData,id,titleText,xText,yText</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(id))</span><br><span class="line">    <span class="keyword">var</span> xAxisData = chartData.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;<span class="keyword">return</span> item[<span class="number">0</span>]&#125;)</span><br><span class="line">    <span class="keyword">var</span> pieData = []</span><br><span class="line">    chartData.forEach(<span class="function">(<span class="params">v,i</span>)=&gt;</span>&#123;</span><br><span class="line">      pieData.push(&#123;</span><br><span class="line">        name:v[<span class="number">0</span>],</span><br><span class="line">        value:v[<span class="number">1</span>]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    chart.setOption(&#123;</span><br><span class="line">      title : &#123;</span><br><span class="line">        text: titleText,</span><br><span class="line">        subtext: <span class="string">''</span>,</span><br><span class="line">        x:<span class="string">'center'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      tooltip : &#123;</span><br><span class="line">        trigger: <span class="string">'item'</span>,</span><br><span class="line">        formatter: <span class="string">"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      legend: &#123;</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'left'</span>,</span><br><span class="line">        data: xAxisData</span><br><span class="line">      &#125;,</span><br><span class="line">      series : [</span><br><span class="line">        &#123;</span><br><span class="line">          name: xText,</span><br><span class="line">          type: <span class="string">'pie'</span>,</span><br><span class="line">          radius : <span class="string">'55%'</span>,</span><br><span class="line">          center: [<span class="string">'50%'</span>, <span class="string">'60%'</span>],</span><br><span class="line">          data:pieData,</span><br><span class="line">          itemStyle: &#123;</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">              shadowBlur: <span class="number">10</span>,</span><br><span class="line">              shadowOffsetX: <span class="number">0</span>,</span><br><span class="line">              shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>挂载结束、数据源改变时重绘</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  _chartData(val)&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>._type)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"LineAndBar"</span>:</span><br><span class="line">        drawLineAndBar(val,<span class="keyword">this</span>._id,<span class="keyword">this</span>._titleText,<span class="keyword">this</span>._xText,<span class="keyword">this</span>._yText);</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"LineOrBar"</span>:</span><br><span class="line">        drawLineOrBar(val,<span class="keyword">this</span>._id,<span class="keyword">this</span>._titleText,<span class="keyword">this</span>._xText,<span class="keyword">this</span>._yText);</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"Pie"</span>:</span><br><span class="line">        drawPie(val,<span class="keyword">this</span>._id,<span class="keyword">this</span>._titleText,<span class="keyword">this</span>._xText,<span class="keyword">this</span>._yText);</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        drawLineAndBar(val,<span class="keyword">this</span>._id,<span class="keyword">this</span>._titleText,<span class="keyword">this</span>._xText,<span class="keyword">this</span>._yText);</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">this</span>._type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"LineAndBar"</span>:</span><br><span class="line">      drawLineAndBar(<span class="keyword">this</span>._chartData,<span class="keyword">this</span>._id,<span class="keyword">this</span>._titleText,<span class="keyword">this</span>._xText,<span class="keyword">this</span>._yText);</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"LineOrBar"</span>:</span><br><span class="line">      drawLineOrBar(<span class="keyword">this</span>._chartData,<span class="keyword">this</span>._id,<span class="keyword">this</span>._titleText,<span class="keyword">this</span>._xText,<span class="keyword">this</span>._yText);</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Pie"</span>:</span><br><span class="line">      drawPie(<span class="keyword">this</span>._chartData,<span class="keyword">this</span>._id,<span class="keyword">this</span>._titleText,<span class="keyword">this</span>._xText,<span class="keyword">this</span>._yText);</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      drawLineAndBar(<span class="keyword">this</span>._chartData,<span class="keyword">this</span>._id,<span class="keyword">this</span>._titleText,<span class="keyword">this</span>._xText,<span class="keyword">this</span>._yText);</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果觉得有用，欢迎star <a href="https://github.com/calebman/vue-DBM" target="_blank" rel="noopener">calebman/vue-DBM</a></p>]]></content>
    
    <summary type="html">
    
      将Echarts做一层小小的封装以满足使用需求
    
    </summary>
    
      <category term="前端" scheme="https://chenjianhui.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vuejs" scheme="https://chenjianhui.site/tags/vuejs/"/>
    
      <category term="echarts" scheme="https://chenjianhui.site/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>基于Element构建自定义树</title>
    <link href="https://chenjianhui.site/2017-09-19-vue-custom-tree/"/>
    <id>https://chenjianhui.site/2017-09-19-vue-custom-tree/</id>
    <published>2017-09-19T07:18:56.000Z</published>
    <updated>2019-03-21T03:38:11.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://resources.chenjianhui.site/2017-09-19-home-pic.jpg" alt></p><a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><hr><p>做项目的时候要使用到一个自定义的树形控件来构建表格树，在github上搜了一下没有搜索到合适的（好看的）可以直接用的，查看Element的组件说明时发现它的<a href="http://element.eleme.io/#/zh-CN/component/tree" target="_blank" rel="noopener">Tree控件</a>可以使用render来自定义节点样式，于是基于它封装了一个可以增、删、改的树形组件，现在分享一下它的使用与实现。</p><h2 id="控件演示"><a href="#控件演示" class="headerlink" title="控件演示"></a>控件演示</h2><p><img src="https://resources.chenjianhui.site/2017-09-19-effect.gif" alt></p><h2 id="控件使用"><a href="#控件使用" class="headerlink" title="控件使用"></a>控件使用</h2><hr><h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><ul><li>基于element-ui树形控件的二次封装</li><li>提供编辑、删除节点的接口</li><li>提供一个next钩子，在业务处理失败时可使用next(false)回滚操作</li><li>控件源码见 <a href="https://github.com/calebman/vue-DBM" target="_blank" rel="noopener">github</a></li></ul><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><ul><li>props</li></ul><table><thead><tr><th>属性</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>value</td><td>源数据，可使用v-model双向绑定</td><td>Array</td></tr></tbody></table><ul><li>events</li></ul><table><thead><tr><th>事件名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>SaveEdit</td><td>点击编辑或者添加树节点后的保存事件</td><td>(父节点数据、当前节点数据、next)</td></tr><tr><td>DelNode</td><td>删除节点事件</td><td>(父节点数据、当前节点数据、next)</td></tr><tr><td>NodeClick</td><td>节点点击事件</td><td>(当前节点数据)</td></tr></tbody></table><ul><li>源数据描述</li></ul><table><thead><tr><th>属性</th><th>说明 </th></tr></thead><tbody><tr><td>value</td><td>树节点的唯一标识</td></tr><tr><td>label</td><td>树节点的显示名称</td></tr><tr><td>status</td><td>(1：编辑状态)(0：显示状态)(-1不可编辑状态)</td></tr><tr><td>children</td><td>子节点数据</td></tr></tbody></table><ul><li>调用示例</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;m-tree</span><br><span class="line">    v-model=<span class="string">"tableTree"</span></span><br><span class="line">    @SaveEdit=<span class="string">"SaveEdit"</span></span><br><span class="line">    @DelNode=<span class="string">"DelNode"</span></span><br><span class="line">    @NodeClick=<span class="string">"handleNodeClick"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">m-tree</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">SaveEdit(parentNode,data,next)&#123;</span></span><br><span class="line"><span class="xml">    var param = &#123;</span></span><br><span class="line"><span class="xml">      parentNode:parentNode,</span></span><br><span class="line"><span class="xml">      node:data</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    this.$http.post(URL,param).then((response) =&gt; &#123;</span></span><br><span class="line"><span class="xml">      if(response.status == 200)&#123;</span></span><br><span class="line"><span class="xml">        next(true,response.body.data.nodeId)</span></span><br><span class="line"><span class="xml">      &#125;else&#123;</span></span><br><span class="line"><span class="xml">        next(false)</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><hr><ul><li><p>构建子节点的模板</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"span_item"</span>&gt;</span><br><span class="line">  &lt;span @click=<span class="string">"Expanded"</span>&gt;</span><br><span class="line">    &lt;Input v-<span class="keyword">if</span>=<span class="string">"node.status == 1"</span> style=<span class="string">"width: 100px;"</span> v-model=<span class="string">"node.label"</span> size=<span class="string">"small"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span></span><br><span class="line">    &lt;Icon  v-<span class="keyword">if</span>=<span class="string">"node.status == 0"</span> type=<span class="string">"asterisk"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span></span><br><span class="line">    &lt;Icon v-<span class="keyword">if</span>=<span class="string">"node.status == -1"</span> type=<span class="string">"ios-keypad-outline"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span></span><br><span class="line">    &lt;span v-<span class="keyword">if</span>=<span class="string">"node.status != 1"</span>&gt;&#123;&#123;node.label&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>span&gt;</span><br><span class="line">  &lt;span v-<span class="keyword">if</span>=<span class="string">"node.status == 1"</span>&gt;</span><br><span class="line">    &lt;Button  style=<span class="string">"margin-left: 8px;"</span> size=<span class="string">"small"</span> type=<span class="string">"success"</span> icon=<span class="string">"checkmark-circled"</span> @click=<span class="string">"SaveEdit"</span>&gt;确认&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Button style="margin-left: 8px;" size="small" type="ghost" icon="checkmark-circled" @click="CancelEdit"&gt;取消&lt;/</span>Button&gt;</span><br><span class="line">  &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;span class="span_icon"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;Icon v-if="node.status == 0" style="margin-left: 8px" color="gray" type="edit" size="16" @click.native="OpenEdit"&gt;&lt;/</span>Icon&gt;</span><br><span class="line">     &lt;Icon v-<span class="keyword">if</span>=<span class="string">"node.status == 0"</span> style=<span class="string">"margin-left: 8px"</span> type=<span class="string">"plus-round"</span> color=<span class="string">"gray"</span> size=<span class="string">"16"</span> @click.native=<span class="string">"Append"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span></span><br><span class="line">     &lt;Icon v-<span class="keyword">if</span>=<span class="string">"node.status == 0&amp;&amp;node.children.length &lt; 1"</span> style=<span class="string">"margin-left: 8px"</span> type=<span class="string">"ios-trash"</span> color=<span class="string">"red"</span> size=<span class="string">"18"</span> @click.native=<span class="string">"Delete"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>span&gt;</span><br></pre></td></tr></table></figure></li><li><p>子节点通过$emit通知父节点事件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">SaveEdit()&#123;</span><br><span class="line">    <span class="comment">//保存节点事件</span></span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'SaveEdit'</span>,<span class="keyword">this</span>.nodeData)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>父节点核心实现，使用renderContent函数加载子节点模板，点击保存节点时将业务参数保存在runParam中用于在业务操作失败（网络请求失败、服务端异常等情况）的数据回滚</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-tree</span><br><span class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">"filter-tree"</span></span><br><span class="line">  style=<span class="string">"overflow:auto;"</span></span><br><span class="line">  :data=<span class="string">"treeData"</span></span><br><span class="line">  :filter-node-method=<span class="string">"filterNode"</span></span><br><span class="line">  @node-click=<span class="string">"handleNodeClick"</span></span><br><span class="line">  ref=<span class="string">"tree"</span></span><br><span class="line">  node-key=<span class="string">"value"</span></span><br><span class="line">  :expand-on-click-node=<span class="string">"false"</span></span><br><span class="line">  :render-content=<span class="string">"renderContent"</span></span><br><span class="line">  <span class="keyword">default</span>-expand-all&gt;</span><br><span class="line">&lt;<span class="regexp">/el-tree&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/子节点模板</span></span><br><span class="line"><span class="regexp">renderContent(h, &#123; node, data, store &#125;) &#123;</span></span><br><span class="line"><span class="regexp">    return h(TreeItem,&#123;</span></span><br><span class="line"><span class="regexp">      props:&#123;</span></span><br><span class="line"><span class="regexp">        value:data,</span></span><br><span class="line"><span class="regexp">        treeNode:node</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      on:&#123;</span></span><br><span class="line"><span class="regexp">        input:(node)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">          data = node</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        Append: () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          node.expanded = true</span></span><br><span class="line"><span class="regexp">          data.children.push(&#123; value: this.$utilHelper.generateUUID(), label: '请输入模块名称', children: [],status:1,isAdd:true &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/保存节点</span></span><br><span class="line"><span class="regexp">        SaveEdit:(nodeData)=&gt; &#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/递归查找父节点</span></span><br><span class="line"><span class="regexp">          var parentNode = this.$utilHelper.getNode(this.treeData,data.value).parentNode</span></span><br><span class="line"><span class="regexp">          this.runParam.parentNode = parentNode</span></span><br><span class="line"><span class="regexp">          this.runParam.data = data</span></span><br><span class="line"><span class="regexp">          this.runParam.nodeData = nodeData</span></span><br><span class="line"><span class="regexp">          this.$emit('SaveEdit',parentNode,data,this.CanSaveNext)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>操作结果钩子，如果next函数传入false则判定操作失败，使用runParam中的参数进行回滚，该节点的编辑保存操作将无效</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">CanSaveNext(isNext,nodeId)&#123;</span><br><span class="line">  <span class="keyword">let</span> parentNode = <span class="keyword">this</span>.runParam.parentNode</span><br><span class="line">  <span class="keyword">let</span> nodeData = <span class="keyword">this</span>.runParam.nodeData</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">this</span>.runParam.data</span><br><span class="line">  <span class="keyword">if</span>(isNext)&#123;</span><br><span class="line">    parentNode.children.forEach(<span class="function">(<span class="params">v,i</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(v.value == data.value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.HOST != <span class="string">"static"</span>&amp;&amp;data.isAdd)&#123;</span><br><span class="line">          data.value = nodeId</span><br><span class="line">        &#125;</span><br><span class="line">        data.status = <span class="number">0</span></span><br><span class="line">        parentNode.children.splice(i,<span class="number">1</span>,data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!data.isAdd)&#123;</span><br><span class="line">      parentNode.children.forEach(<span class="function">(<span class="params">v,i</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v.value == nodeData.value)&#123;</span><br><span class="line">          data.label = nodeData.label</span><br><span class="line">          parentNode.children.splice(i,<span class="number">1</span>,data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.runParam = &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果觉得有用，欢迎star <a href="https://github.com/calebman/vue-DBM" target="_blank" rel="noopener">calebman/vue-DBM</a></p>]]></content>
    
    <summary type="html">
    
      基于Element的render函数封装一个可以增、删、改的树形组件
    
    </summary>
    
      <category term="前端" scheme="https://chenjianhui.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vuejs" scheme="https://chenjianhui.site/tags/vuejs/"/>
    
      <category term="element-ui" scheme="https://chenjianhui.site/tags/element-ui/"/>
    
  </entry>
  
</feed>
